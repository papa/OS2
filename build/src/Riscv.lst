GAS LISTING /tmp/cclE82Jg.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10initSystemEv
   9              	_ZN5Riscv10initSystemEv:
  10              	.LFB27:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 4/27/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/PCB.hpp"
   8:src/Riscv.cpp **** #include "../h/syscall_cpp.hpp"
   9:src/Riscv.cpp **** #include "../h/SleepPCBList.hpp"
  10:src/Riscv.cpp **** #include "../h/KConsole.hpp"
  11:src/Riscv.cpp **** #include "../h/Scheduler.hpp"
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** uint64 Riscv::totalTime = 0;
  14:src/Riscv.cpp **** bool Riscv::finishSystem = false;
  15:src/Riscv.cpp **** bool Riscv::kernelMainCalled = false;
  16:src/Riscv.cpp **** 
  17:src/Riscv.cpp **** void Riscv::initSystem()
  18:src/Riscv.cpp **** {
  12              		.loc 1 18 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  19:src/Riscv.cpp ****     w_stvec((uint64)&Riscv::supervisorTrap);
  22              		.loc 1 19 5
  23              		.loc 1 19 12 is_stmt 0
  24 0010 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  24      83B70700 
  25              	.LVL0:
  26              	.LBB41:
  27              	.LBB42:
  28              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 4/27/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_0_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_0_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** #include "../test/userMain.hpp"
  10:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cclE82Jg.s 			page 2


  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp ****     static void kernelMain();
  15:src/../h/Riscv.hpp **** private:
  16:src/../h/Riscv.hpp ****     static bool kernelMainCalled;
  17:src/../h/Riscv.hpp ****     static void changePrivMode();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     static void initSystem();
  20:src/../h/Riscv.hpp ****     static void endSystem();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     static void userMainWrapper(void* p);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     static void enableInterrupts();
  25:src/../h/Riscv.hpp **** 
  26:src/../h/Riscv.hpp ****     static void disableTimerInterrupts();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     static void disableInterrupts();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     static void idleRiscv(void* arg);
  31:src/../h/Riscv.hpp **** 
  32:src/../h/Riscv.hpp ****     static void pushRegisters();
  33:src/../h/Riscv.hpp ****     static void popRegisters();
  34:src/../h/Riscv.hpp **** 
  35:src/../h/Riscv.hpp ****     static uint64 r_scause();
  36:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  37:src/../h/Riscv.hpp **** 
  38:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  39:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  43:src/../h/Riscv.hpp **** 
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp ****     static bool finishSystem;
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp ****     static uint64 r_sip();
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  65:src/../h/Riscv.hpp ****     {
  66:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  67:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
GAS LISTING /tmp/cclE82Jg.s 			page 3


  68:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  69:src/../h/Riscv.hpp ****     };
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     static void w_a0_sscratch();
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     static void mc_sie(uint64 mask);
  78:src/../h/Riscv.hpp **** 
  79:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     static uint64 r_sie();
  86:src/../h/Riscv.hpp ****     static void w_sie(uint64 sie);
  87:src/../h/Riscv.hpp ****     static void popSppSpie();
  88:src/../h/Riscv.hpp **** 
  89:src/../h/Riscv.hpp ****     static void supervisorTrap();
  90:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     static const uint64 bntOne = 1UL << 63;;
  93:src/../h/Riscv.hpp ****     static const uint64 bntZero = 0UL;
  94:src/../h/Riscv.hpp ****     static const uint64 timerInterrupt = bntOne + 1UL;
  95:src/../h/Riscv.hpp ****     static const uint64 hwInterrupt = bntOne + 9UL;
  96:src/../h/Riscv.hpp ****     static const uint64 operationInterrupt = bntZero + 2UL;
  97:src/../h/Riscv.hpp ****     static const uint64 addrReadInterrupt = bntZero + 5UL;
  98:src/../h/Riscv.hpp ****     static const uint64 addrWriteInterrupt = bntZero + 7UL;
  99:src/../h/Riscv.hpp ****     static const uint64 ecallUserInterrupt = bntZero + 8UL;
 100:src/../h/Riscv.hpp ****     static const uint64 ecallSystemInterupt = bntZero + 9UL;
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp ****     static uint64 totalTime;
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp ****     friend class PCB;
 105:src/../h/Riscv.hpp ****     friend class Scheduler;
 106:src/../h/Riscv.hpp ****     friend class SleepPCBList;
 107:src/../h/Riscv.hpp ****     friend class KSemaphore;
 108:src/../h/Riscv.hpp ****     friend class KConsole;
 109:src/../h/Riscv.hpp ****     friend class MemoryAllocator;
 110:src/../h/Riscv.hpp **** };
 111:src/../h/Riscv.hpp **** 
 112:src/../h/Riscv.hpp **** inline void Riscv::mc_sie(uint64 mask)
 113:src/../h/Riscv.hpp **** {
 114:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sie, %0" : :"r"(mask));
 115:src/../h/Riscv.hpp **** }
 116:src/../h/Riscv.hpp **** 
 117:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
 118:src/../h/Riscv.hpp ****     uint64 volatile scause;
 119:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
 120:src/../h/Riscv.hpp ****     return scause;
 121:src/../h/Riscv.hpp **** }
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
 124:src/../h/Riscv.hpp ****     __asm__ volatile("csrw scause, %0" : :"r"(scause));
GAS LISTING /tmp/cclE82Jg.s 			page 4


 125:src/../h/Riscv.hpp **** }
 126:src/../h/Riscv.hpp **** 
 127:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
 128:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 129:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 130:src/../h/Riscv.hpp ****     return sepc;
 131:src/../h/Riscv.hpp **** }
 132:src/../h/Riscv.hpp **** 
 133:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 134:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sepc, %0" : :"r"(sepc));
 135:src/../h/Riscv.hpp **** }
 136:src/../h/Riscv.hpp **** 
 137:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 138:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 139:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, stvec" : "=r"(stvec));
 140:src/../h/Riscv.hpp ****     return stvec;
 141:src/../h/Riscv.hpp **** }
 142:src/../h/Riscv.hpp **** 
 143:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 144:src/../h/Riscv.hpp ****     __asm__ volatile("csrw stvec, %0" : :"r"(stvec));
  29              		.loc 2 144 5 is_stmt 1
  30              		.loc 2 144 53 is_stmt 0
  31              	#APP
  32              	# 144 "src/../h/Riscv.hpp" 1
 145              	}
  33              		csrw stvec, a5
  34              	# 0 "" 2
  35              	.LVL1:
  36              	#NO_APP
  37              	.LBE42:
  38              	.LBE41:
  20:src/Riscv.cpp ****     PCB::initialize();
  39              		.loc 1 20 5 is_stmt 1
  40              		.loc 1 20 20 is_stmt 0
  41 001c 97000000 		call	_ZN3PCB10initializeEv@plt
  41      E7800000 
  42              	.LVL2:
  21:src/Riscv.cpp ****     KConsole::initialize();
  43              		.loc 1 21 5 is_stmt 1
  44              		.loc 1 21 25 is_stmt 0
  45 0024 97000000 		call	_ZN8KConsole10initializeEv@plt
  45      E7800000 
  46              	.LVL3:
  22:src/Riscv.cpp **** }
  47              		.loc 1 22 1
  48 002c 83308100 		ld	ra,8(sp)
  49              		.cfi_restore 1
  50 0030 03340100 		ld	s0,0(sp)
  51              		.cfi_restore 8
  52              		.cfi_def_cfa 2, 16
  53 0034 13010101 		addi	sp,sp,16
  54              		.cfi_def_cfa_offset 0
  55 0038 67800000 		jr	ra
  56              		.cfi_endproc
  57              	.LFE27:
  59              		.align	2
  60              		.globl	_ZN5Riscv16enableInterruptsEv
GAS LISTING /tmp/cclE82Jg.s 			page 5


  62              	_ZN5Riscv16enableInterruptsEv:
  63              	.LFB29:
  23:src/Riscv.cpp **** 
  24:src/Riscv.cpp **** void Riscv::endSystem()
  25:src/Riscv.cpp **** {
  26:src/Riscv.cpp ****     disableInterrupts();
  27:src/Riscv.cpp ****     finishSystem = true;
  28:src/Riscv.cpp ****     PCB* pcb = 0;
  29:src/Riscv.cpp ****     while(true)
  30:src/Riscv.cpp ****     {
  31:src/Riscv.cpp ****         pcb = Scheduler::get();
  32:src/Riscv.cpp ****         if(pcb == 0) break;
  33:src/Riscv.cpp ****     }
  34:src/Riscv.cpp ****     Scheduler::put(PCB::consolePCB);
  35:src/Riscv.cpp ****     KConsole::pendingGetc = 0;
  36:src/Riscv.cpp ****     enableInterrupts();
  37:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
  38:src/Riscv.cpp ****     {
  39:src/Riscv.cpp ****         thread_dispatch();
  40:src/Riscv.cpp ****     }
  41:src/Riscv.cpp ****     disableInterrupts();
  42:src/Riscv.cpp **** }
  43:src/Riscv.cpp **** 
  44:src/Riscv.cpp **** void Riscv::enableInterrupts() {
  64              		.loc 1 44 32 is_stmt 1
  65              		.cfi_startproc
  66 003c 130101FF 		addi	sp,sp,-16
  67              		.cfi_def_cfa_offset 16
  68 0040 23348100 		sd	s0,8(sp)
  69              		.cfi_offset 8, -8
  70 0044 13040101 		addi	s0,sp,16
  71              		.cfi_def_cfa 8, 0
  45:src/Riscv.cpp ****     ms_sstatus(Riscv::SSTATUS_SIE);
  72              		.loc 1 45 5
  73              	.LVL4:
  74              	.LBB43:
  75              	.LBB44:
 146:src/../h/Riscv.hpp **** 
 147:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval() {
 148:src/../h/Riscv.hpp ****     uint64 volatile stval;
 149:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, stval" : "=r"(stval));
 150:src/../h/Riscv.hpp ****     return stval;
 151:src/../h/Riscv.hpp **** }
 152:src/../h/Riscv.hpp **** 
 153:src/../h/Riscv.hpp **** inline void Riscv::w_sie(uint64 sie)
 154:src/../h/Riscv.hpp **** {
 155:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sie, %0" : :"r"(sie));
 156:src/../h/Riscv.hpp **** }
 157:src/../h/Riscv.hpp **** 
 158:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
 159:src/../h/Riscv.hpp ****     __asm__ volatile("csrw stval, %0" : :"r"(stval));
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 163:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sip, %0" : :"r"(mask));
 164:src/../h/Riscv.hpp **** }
 165:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/cclE82Jg.s 			page 6


 166:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 167:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %0" : :"r"(mask));
 168:src/../h/Riscv.hpp **** }
 169:src/../h/Riscv.hpp **** 
 170:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sie()
 171:src/../h/Riscv.hpp **** {
 172:src/../h/Riscv.hpp ****     uint64 volatile sie;
 173:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sip" : "=r"(sie));
 174:src/../h/Riscv.hpp ****     return sie;
 175:src/../h/Riscv.hpp **** }
 176:src/../h/Riscv.hpp **** 
 177:src/../h/Riscv.hpp **** inline void Riscv::ms_sie(uint64 mask)
 178:src/../h/Riscv.hpp **** {
 179:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sie, %0" : :"r"(mask));
 180:src/../h/Riscv.hpp **** }
 181:src/../h/Riscv.hpp **** 
 182:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 183:src/../h/Riscv.hpp ****     uint64 volatile sip;
 184:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sip" : "=r"(sip));
 185:src/../h/Riscv.hpp ****     return sip;
 186:src/../h/Riscv.hpp **** }
 187:src/../h/Riscv.hpp **** 
 188:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 189:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sip, %0" : :"r"(sip));
 190:src/../h/Riscv.hpp **** }
 191:src/../h/Riscv.hpp **** 
 192:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 193:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus, %0" : :"r"(mask));
  76              		.loc 2 193 5
  77              		.loc 2 193 54 is_stmt 0
  78 0048 93072000 		li	a5,2
  79              	#APP
  80              	# 193 "src/../h/Riscv.hpp" 1
 194              	}
  81              		csrs sstatus, a5
  82              	# 0 "" 2
  83              	.LVL5:
  84              	#NO_APP
  85              	.LBE44:
  86              	.LBE43:
  46:src/Riscv.cpp **** }
  87              		.loc 1 46 1
  88 0050 03348100 		ld	s0,8(sp)
  89              		.cfi_restore 8
  90              		.cfi_def_cfa 2, 16
  91 0054 13010101 		addi	sp,sp,16
  92              		.cfi_def_cfa_offset 0
  93 0058 67800000 		jr	ra
  94              		.cfi_endproc
  95              	.LFE29:
  97              		.align	2
  98              		.globl	_ZN5Riscv17disableInterruptsEv
 100              	_ZN5Riscv17disableInterruptsEv:
 101              	.LFB30:
  47:src/Riscv.cpp **** 
  48:src/Riscv.cpp **** void Riscv::disableInterrupts()
  49:src/Riscv.cpp **** {
GAS LISTING /tmp/cclE82Jg.s 			page 7


 102              		.loc 1 49 1 is_stmt 1
 103              		.cfi_startproc
 104 005c 130101FF 		addi	sp,sp,-16
 105              		.cfi_def_cfa_offset 16
 106 0060 23348100 		sd	s0,8(sp)
 107              		.cfi_offset 8, -8
 108 0064 13040101 		addi	s0,sp,16
 109              		.cfi_def_cfa 8, 0
  50:src/Riscv.cpp ****     mc_sstatus(Riscv::SSTATUS_SIE);
 110              		.loc 1 50 5
 111              	.LVL6:
 112              	.LBB45:
 113              	.LBB46:
 195:src/../h/Riscv.hpp **** 
 196:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 197:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus, %0" : :"r"(mask));
 114              		.loc 2 197 5
 115              		.loc 2 197 54 is_stmt 0
 116 0068 93072000 		li	a5,2
 117              	#APP
 118              	# 197 "src/../h/Riscv.hpp" 1
 198              	}
 119              		csrc sstatus, a5
 120              	# 0 "" 2
 121              	.LVL7:
 122              	#NO_APP
 123              	.LBE46:
 124              	.LBE45:
  51:src/Riscv.cpp **** }
 125              		.loc 1 51 1
 126 0070 03348100 		ld	s0,8(sp)
 127              		.cfi_restore 8
 128              		.cfi_def_cfa 2, 16
 129 0074 13010101 		addi	sp,sp,16
 130              		.cfi_def_cfa_offset 0
 131 0078 67800000 		jr	ra
 132              		.cfi_endproc
 133              	.LFE30:
 135              		.align	2
 136              		.globl	_ZN5Riscv9endSystemEv
 138              	_ZN5Riscv9endSystemEv:
 139              	.LFB28:
  25:src/Riscv.cpp ****     disableInterrupts();
 140              		.loc 1 25 1 is_stmt 1
 141              		.cfi_startproc
 142 007c 130101FF 		addi	sp,sp,-16
 143              		.cfi_def_cfa_offset 16
 144 0080 23341100 		sd	ra,8(sp)
 145 0084 23308100 		sd	s0,0(sp)
 146              		.cfi_offset 1, -8
 147              		.cfi_offset 8, -16
 148 0088 13040101 		addi	s0,sp,16
 149              		.cfi_def_cfa 8, 0
  26:src/Riscv.cpp ****     finishSystem = true;
 150              		.loc 1 26 5
  26:src/Riscv.cpp ****     finishSystem = true;
 151              		.loc 1 26 22 is_stmt 0
GAS LISTING /tmp/cclE82Jg.s 			page 8


 152 008c 97000000 		call	_ZN5Riscv17disableInterruptsEv
 152      E7800000 
 153              	.LVL8:
  27:src/Riscv.cpp ****     PCB* pcb = 0;
 154              		.loc 1 27 5 is_stmt 1
  27:src/Riscv.cpp ****     PCB* pcb = 0;
 155              		.loc 1 27 18 is_stmt 0
 156 0094 93071000 		li	a5,1
 157 0098 17070000 		sb	a5,.LANCHOR0,a4
 157      2300F700 
  28:src/Riscv.cpp ****     while(true)
 158              		.loc 1 28 5 is_stmt 1
 159              	.LVL9:
 160              	.L8:
  29:src/Riscv.cpp ****     {
 161              		.loc 1 29 5
  31:src/Riscv.cpp ****         if(pcb == 0) break;
 162              		.loc 1 31 9
  31:src/Riscv.cpp ****         if(pcb == 0) break;
 163              		.loc 1 31 29 is_stmt 0
 164 00a0 97000000 		call	_ZN9Scheduler3getEv@plt
 164      E7800000 
 165              	.LVL10:
  32:src/Riscv.cpp ****     }
 166              		.loc 1 32 9 is_stmt 1
 167 00a8 E31C05FE 		bnez	a0,.L8
  34:src/Riscv.cpp ****     KConsole::pendingGetc = 0;
 168              		.loc 1 34 5
  34:src/Riscv.cpp ****     KConsole::pendingGetc = 0;
 169              		.loc 1 34 19 is_stmt 0
 170 00ac 97070000 		la	a5,_ZN3PCB10consolePCBE
 170      83B70700 
 171 00b4 03B50700 		ld	a0,0(a5)
 172              	.LVL11:
 173 00b8 97000000 		call	_ZN9Scheduler3putEP3PCB@plt
 173      E7800000 
 174              	.LVL12:
  35:src/Riscv.cpp ****     enableInterrupts();
 175              		.loc 1 35 5 is_stmt 1
  35:src/Riscv.cpp ****     enableInterrupts();
 176              		.loc 1 35 27 is_stmt 0
 177 00c0 97070000 		la	a5,_ZN8KConsole11pendingGetcE
 177      83B70700 
 178 00c8 23B00700 		sd	zero,0(a5)
  36:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
 179              		.loc 1 36 5 is_stmt 1
  36:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
 180              		.loc 1 36 21 is_stmt 0
 181 00cc 97000000 		call	_ZN5Riscv16enableInterruptsEv
 181      E7800000 
 182              	.LVL13:
 183              	.L10:
  37:src/Riscv.cpp ****     {
 184              		.loc 1 37 5 is_stmt 1
  37:src/Riscv.cpp ****     {
 185              		.loc 1 37 11
  37:src/Riscv.cpp ****     {
GAS LISTING /tmp/cclE82Jg.s 			page 9


 186              		.loc 1 37 39 is_stmt 0
 187 00d4 97070000 		la	a5,_ZN3PCB10consolePCBE
 187      83B70700 
 188 00dc 03B50700 		ld	a0,0(a5)
 189 00e0 97000000 		call	_ZN3PCB10isFinishedEv@plt
 189      E7800000 
 190              	.LVL14:
  37:src/Riscv.cpp ****     {
 191              		.loc 1 37 11
 192 00e8 63180500 		bnez	a0,.L9
  39:src/Riscv.cpp ****     }
 193              		.loc 1 39 9 is_stmt 1
  39:src/Riscv.cpp ****     }
 194              		.loc 1 39 24 is_stmt 0
 195 00ec 97000000 		call	_Z15thread_dispatchv@plt
 195      E7800000 
 196              	.LVL15:
  37:src/Riscv.cpp ****     {
 197              		.loc 1 37 5
 198 00f4 6FF01FFE 		j	.L10
 199              	.L9:
  41:src/Riscv.cpp **** }
 200              		.loc 1 41 5 is_stmt 1
  41:src/Riscv.cpp **** }
 201              		.loc 1 41 22 is_stmt 0
 202 00f8 97000000 		call	_ZN5Riscv17disableInterruptsEv
 202      E7800000 
 203              	.LVL16:
  42:src/Riscv.cpp **** 
 204              		.loc 1 42 1
 205 0100 83308100 		ld	ra,8(sp)
 206              		.cfi_restore 1
 207 0104 03340100 		ld	s0,0(sp)
 208              		.cfi_restore 8
 209              		.cfi_def_cfa 2, 16
 210 0108 13010101 		addi	sp,sp,16
 211              		.cfi_def_cfa_offset 0
 212 010c 67800000 		jr	ra
 213              		.cfi_endproc
 214              	.LFE28:
 216              		.align	2
 217              		.globl	_ZN5Riscv10popSppSpieEv
 219              	_ZN5Riscv10popSppSpieEv:
 220              	.LFB31:
  52:src/Riscv.cpp **** 
  53:src/Riscv.cpp **** void Riscv::popSppSpie()
  54:src/Riscv.cpp **** {
 221              		.loc 1 54 1 is_stmt 1
 222              		.cfi_startproc
 223 0110 130101FF 		addi	sp,sp,-16
 224              		.cfi_def_cfa_offset 16
 225 0114 23348100 		sd	s0,8(sp)
 226              		.cfi_offset 8, -8
 227 0118 13040101 		addi	s0,sp,16
 228              		.cfi_def_cfa 8, 0
  55:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 229              		.loc 1 55 5
GAS LISTING /tmp/cclE82Jg.s 			page 10


 230              		.loc 1 55 39 is_stmt 0
 231              	#APP
 232              	# 55 "src/Riscv.cpp" 1
  56              	    __asm__ volatile ("sret");
 233              		csrw sepc, ra
 234              	# 0 "" 2
 235              		.loc 1 56 5 is_stmt 1
 236              		.loc 1 56 30 is_stmt 0
 237              	# 56 "src/Riscv.cpp" 1
  57              	}
 238              		sret
 239              	# 0 "" 2
 240              		.loc 1 57 1
 241              	#NO_APP
 242 0124 03348100 		ld	s0,8(sp)
 243              		.cfi_restore 8
 244              		.cfi_def_cfa 2, 16
 245 0128 13010101 		addi	sp,sp,16
 246              		.cfi_def_cfa_offset 0
 247 012c 67800000 		jr	ra
 248              		.cfi_endproc
 249              	.LFE31:
 251              		.align	2
 252              		.globl	_ZN5Riscv10kernelMainEv
 254              	_ZN5Riscv10kernelMainEv:
 255              	.LFB33:
  58:src/Riscv.cpp **** 
  59:src/Riscv.cpp **** void Riscv::handleSupervisorTrap()
  60:src/Riscv.cpp **** {
  61:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(PCB::savedRegA4));
  62:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
  63:src/Riscv.cpp **** 
  64:src/Riscv.cpp ****     uint64 scause = Riscv::r_scause();
  65:src/Riscv.cpp **** 
  66:src/Riscv.cpp ****     switch(scause)
  67:src/Riscv.cpp ****     {
  68:src/Riscv.cpp ****         case timerInterrupt:
  69:src/Riscv.cpp ****         {
  70:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc();
  71:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
  72:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
  73:src/Riscv.cpp ****             //KConsole::trapPrintString("timerInterrupt\n");
  74:src/Riscv.cpp ****             //static uint64 total = 0;
  75:src/Riscv.cpp ****             totalTime++;
  76:src/Riscv.cpp ****             //KConsole::trapPrintInt(totalTime);
  77:src/Riscv.cpp **** 
  78:src/Riscv.cpp ****             PCB::timeSliceCounter++;
  79:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
  80:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
  81:src/Riscv.cpp ****             {
  82:src/Riscv.cpp ****                 PCB::timeSliceCounter = 0;
  83:src/Riscv.cpp ****                 PCB::dispatch();
  84:src/Riscv.cpp ****             }
  85:src/Riscv.cpp **** 
  86:src/Riscv.cpp ****             Riscv::w_sstatus(sstatus);
  87:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
  88:src/Riscv.cpp ****             changePrivMode();
GAS LISTING /tmp/cclE82Jg.s 			page 11


  89:src/Riscv.cpp ****             break;
  90:src/Riscv.cpp ****         }
  91:src/Riscv.cpp ****         case hwInterrupt:
  92:src/Riscv.cpp ****         {
  93:src/Riscv.cpp ****             uint64 x = CONSOLE_STATUS;
  94:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
  95:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
  96:src/Riscv.cpp ****             uint64 operation;
  97:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" :  "=r"(operation));
  98:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
  99:src/Riscv.cpp ****             {
 100:src/Riscv.cpp ****                 x = CONSOLE_TX_DATA;
 101:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
 102:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
 103:src/Riscv.cpp ****                 char c;
 104:src/Riscv.cpp ****                 __asm__ volatile("mv %0, a1" :  "=r"(c));
 105:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
 106:src/Riscv.cpp ****                 {
 107:src/Riscv.cpp ****                     KConsole::pendingGetc--;
 108:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
 109:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
 110:src/Riscv.cpp ****                 }
 111:src/Riscv.cpp ****             }
 112:src/Riscv.cpp **** 
 113:src/Riscv.cpp ****             plic_complete(plic_claim());
 114:src/Riscv.cpp **** 
 115:src/Riscv.cpp ****             break;
 116:src/Riscv.cpp ****         }
 117:src/Riscv.cpp ****         case operationInterrupt:
 118:src/Riscv.cpp ****         {
 119:src/Riscv.cpp ****             //trapPrintString("operation interrupt\n");
 120:src/Riscv.cpp ****             PCB::threadExitHandler();
 121:src/Riscv.cpp ****             break;
 122:src/Riscv.cpp ****         }
 123:src/Riscv.cpp ****         case addrReadInterrupt:
 124:src/Riscv.cpp ****         {
 125:src/Riscv.cpp ****             //trapPrintString("read interrupt\n");
 126:src/Riscv.cpp ****             PCB::threadExitHandler();
 127:src/Riscv.cpp ****             break;
 128:src/Riscv.cpp ****         }
 129:src/Riscv.cpp ****         case addrWriteInterrupt:
 130:src/Riscv.cpp ****         {
 131:src/Riscv.cpp ****             //trapPrintString("write interrupt\n");
 132:src/Riscv.cpp ****             PCB::threadExitHandler();
 133:src/Riscv.cpp ****             break;
 134:src/Riscv.cpp ****         }
 135:src/Riscv.cpp ****         case ecallSystemInterupt:
 136:src/Riscv.cpp ****         case ecallUserInterrupt:
 137:src/Riscv.cpp ****         {
 138:src/Riscv.cpp ****             uint64 operation;
 139:src/Riscv.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
 140:src/Riscv.cpp **** 
 141:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc() + 4;
 142:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 143:src/Riscv.cpp **** 
 144:src/Riscv.cpp ****             switch(operation)
 145:src/Riscv.cpp ****             {
GAS LISTING /tmp/cclE82Jg.s 			page 12


 146:src/Riscv.cpp ****                 case MemoryAllocator::MEM_ALLOC:
 147:src/Riscv.cpp ****                     MemoryAllocator::memAllocHandler();
 148:src/Riscv.cpp ****                     break;
 149:src/Riscv.cpp ****                 case MemoryAllocator::MEM_FREE:
 150:src/Riscv.cpp ****                     MemoryAllocator::memFreeHandler();
 151:src/Riscv.cpp ****                     break;
 152:src/Riscv.cpp ****                 case PCB::THREAD_MAKE_PCB:
 153:src/Riscv.cpp ****                     PCB::threadMakePCBHandler();
 154:src/Riscv.cpp ****                     break;
 155:src/Riscv.cpp ****                 case PCB::THREAD_CREATE:
 156:src/Riscv.cpp ****                     PCB::threadCreateHandler();
 157:src/Riscv.cpp ****                     break;
 158:src/Riscv.cpp ****                 case PCB::THREAD_START:
 159:src/Riscv.cpp ****                     PCB::threadStartHandler();
 160:src/Riscv.cpp ****                     break;
 161:src/Riscv.cpp ****                 case PCB::THREAD_DISPATCH:
 162:src/Riscv.cpp ****                     PCB::threadDispatchHandler();
 163:src/Riscv.cpp ****                     break;
 164:src/Riscv.cpp ****                 case PCB::THREAD_EXIT:
 165:src/Riscv.cpp ****                     PCB::threadExitHandler();
 166:src/Riscv.cpp ****                     break;
 167:src/Riscv.cpp ****                 case PCB::TIME_SLEEP:
 168:src/Riscv.cpp ****                     PCB::threadSleepHandler();
 169:src/Riscv.cpp ****                     break;
 170:src/Riscv.cpp ****                 case PCB::THREAD_DEL_PCB:
 171:src/Riscv.cpp ****                      PCB::threadDelPCBHandler();
 172:src/Riscv.cpp ****                      break;
 173:src/Riscv.cpp ****                 case KSemaphore::SEM_OPEN:
 174:src/Riscv.cpp ****                     KSemaphore::semOpenHandler();
 175:src/Riscv.cpp ****                     break;
 176:src/Riscv.cpp ****                 case KSemaphore::SEM_WAIT:
 177:src/Riscv.cpp ****                     KSemaphore::semWaitHandler();
 178:src/Riscv.cpp ****                     break;
 179:src/Riscv.cpp ****                 case KSemaphore::SEM_SIGNAL:
 180:src/Riscv.cpp ****                     KSemaphore::semSignalHandler();
 181:src/Riscv.cpp ****                     break;
 182:src/Riscv.cpp ****                 case KSemaphore::SEM_CLOSE:
 183:src/Riscv.cpp ****                     KSemaphore::semCloseHandler();
 184:src/Riscv.cpp ****                     break;
 185:src/Riscv.cpp ****                 case KConsole::CONSOLE_GETC:
 186:src/Riscv.cpp ****                     KConsole::getcHandler();
 187:src/Riscv.cpp ****                     break;
 188:src/Riscv.cpp ****                 case KConsole::CONSOLE_PUTC:
 189:src/Riscv.cpp ****                     KConsole::putcHandler();
 190:src/Riscv.cpp ****                     break;
 191:src/Riscv.cpp ****                 case KConsole::CONSOLE_GET_CHAR:
 192:src/Riscv.cpp ****                     KConsole::getCharHandler();
 193:src/Riscv.cpp ****                     break;
 194:src/Riscv.cpp ****             }
 195:src/Riscv.cpp **** 
 196:src/Riscv.cpp ****             Riscv::w_sstatus(sstatus);
 197:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 198:src/Riscv.cpp ****             changePrivMode();
 199:src/Riscv.cpp ****             break;
 200:src/Riscv.cpp ****         }
 201:src/Riscv.cpp ****     }
 202:src/Riscv.cpp **** }
GAS LISTING /tmp/cclE82Jg.s 			page 13


 203:src/Riscv.cpp **** 
 204:src/Riscv.cpp **** void Riscv::kernelMain()
 205:src/Riscv.cpp **** {
 256              		.loc 1 205 1 is_stmt 1
 257              		.cfi_startproc
 206:src/Riscv.cpp ****     if(kernelMainCalled) return;
 258              		.loc 1 206 5
 259 0130 97070000 		lbu	a5,.LANCHOR0+1
 259      83C70700 
 260 0138 63840700 		beqz	a5,.L22
 261 013c 67800000 		ret
 262              	.L22:
 205:src/Riscv.cpp ****     if(kernelMainCalled) return;
 263              		.loc 1 205 1 is_stmt 0
 264 0140 130101FF 		addi	sp,sp,-16
 265              		.cfi_def_cfa_offset 16
 266 0144 23341100 		sd	ra,8(sp)
 267 0148 23308100 		sd	s0,0(sp)
 268              		.cfi_offset 1, -8
 269              		.cfi_offset 8, -16
 270 014c 13040101 		addi	s0,sp,16
 271              		.cfi_def_cfa 8, 0
 207:src/Riscv.cpp ****     kernelMainCalled = true;
 272              		.loc 1 207 5 is_stmt 1
 273              		.loc 1 207 22 is_stmt 0
 274 0150 93071000 		li	a5,1
 275 0154 17070000 		sb	a5,.LANCHOR0+1,a4
 275      2300F700 
 208:src/Riscv.cpp **** 
 209:src/Riscv.cpp ****     initSystem();
 276              		.loc 1 209 5 is_stmt 1
 277              		.loc 1 209 15 is_stmt 0
 278 015c 97000000 		call	_ZN5Riscv10initSystemEv
 278      E7800000 
 279              	.LVL17:
 210:src/Riscv.cpp **** 
 211:src/Riscv.cpp ****     //disableTimerInterrupts();
 212:src/Riscv.cpp ****     enableInterrupts();
 280              		.loc 1 212 5 is_stmt 1
 281              		.loc 1 212 21 is_stmt 0
 282 0164 97000000 		call	_ZN5Riscv16enableInterruptsEv
 282      E7800000 
 283              	.LVL18:
 284              	.L17:
 213:src/Riscv.cpp **** 
 214:src/Riscv.cpp ****     while(!PCB::userPCB->isFinished())
 285              		.loc 1 214 5 is_stmt 1
 286              		.loc 1 214 11
 287              		.loc 1 214 36 is_stmt 0
 288 016c 97070000 		la	a5,_ZN3PCB7userPCBE
 288      83B70700 
 289 0174 03B50700 		ld	a0,0(a5)
 290 0178 97000000 		call	_ZN3PCB10isFinishedEv@plt
 290      E7800000 
 291              	.LVL19:
 292              		.loc 1 214 11
 293 0180 63180500 		bnez	a0,.L16
GAS LISTING /tmp/cclE82Jg.s 			page 14


 215:src/Riscv.cpp ****     {
 216:src/Riscv.cpp ****         thread_dispatch();
 294              		.loc 1 216 9 is_stmt 1
 295              		.loc 1 216 24 is_stmt 0
 296 0184 97000000 		call	_Z15thread_dispatchv@plt
 296      E7800000 
 297              	.LVL20:
 214:src/Riscv.cpp ****     {
 298              		.loc 1 214 5
 299 018c 6FF01FFE 		j	.L17
 300              	.L16:
 217:src/Riscv.cpp ****     }
 218:src/Riscv.cpp **** 
 219:src/Riscv.cpp ****     //printString("End...\n");
 220:src/Riscv.cpp ****     endSystem();
 301              		.loc 1 220 5 is_stmt 1
 302              		.loc 1 220 14 is_stmt 0
 303 0190 97000000 		call	_ZN5Riscv9endSystemEv
 303      E7800000 
 304              	.LVL21:
 221:src/Riscv.cpp **** }
 305              		.loc 1 221 1
 306 0198 83308100 		ld	ra,8(sp)
 307              		.cfi_restore 1
 308 019c 03340100 		ld	s0,0(sp)
 309              		.cfi_restore 8
 310              		.cfi_def_cfa 2, 16
 311 01a0 13010101 		addi	sp,sp,16
 312              		.cfi_def_cfa_offset 0
 313 01a4 67800000 		jr	ra
 314              		.cfi_endproc
 315              	.LFE33:
 317              		.align	2
 318              		.globl	_ZN5Riscv15userMainWrapperEPv
 320              	_ZN5Riscv15userMainWrapperEPv:
 321              	.LFB34:
 222:src/Riscv.cpp **** 
 223:src/Riscv.cpp **** void Riscv::userMainWrapper(void* )
 224:src/Riscv.cpp **** {
 322              		.loc 1 224 1 is_stmt 1
 323              		.cfi_startproc
 324 01a8 130101FF 		addi	sp,sp,-16
 325              		.cfi_def_cfa_offset 16
 326 01ac 23341100 		sd	ra,8(sp)
 327 01b0 23308100 		sd	s0,0(sp)
 328              		.cfi_offset 1, -8
 329              		.cfi_offset 8, -16
 330 01b4 13040101 		addi	s0,sp,16
 331              		.cfi_def_cfa 8, 0
 225:src/Riscv.cpp ****     userMain();
 332              		.loc 1 225 5
 333              		.loc 1 225 13 is_stmt 0
 334 01b8 97000000 		call	_Z8userMainv@plt
 334      E7800000 
 335              	.LVL22:
 226:src/Riscv.cpp **** }
 336              		.loc 1 226 1
GAS LISTING /tmp/cclE82Jg.s 			page 15


 337 01c0 83308100 		ld	ra,8(sp)
 338              		.cfi_restore 1
 339 01c4 03340100 		ld	s0,0(sp)
 340              		.cfi_restore 8
 341              		.cfi_def_cfa 2, 16
 342 01c8 13010101 		addi	sp,sp,16
 343              		.cfi_def_cfa_offset 0
 344 01cc 67800000 		jr	ra
 345              		.cfi_endproc
 346              	.LFE34:
 348              		.align	2
 349              		.globl	_ZN5Riscv22disableTimerInterruptsEv
 351              	_ZN5Riscv22disableTimerInterruptsEv:
 352              	.LFB35:
 227:src/Riscv.cpp **** 
 228:src/Riscv.cpp **** void Riscv::disableTimerInterrupts()
 229:src/Riscv.cpp **** {
 353              		.loc 1 229 1 is_stmt 1
 354              		.cfi_startproc
 355 01d0 130101FF 		addi	sp,sp,-16
 356              		.cfi_def_cfa_offset 16
 357 01d4 23348100 		sd	s0,8(sp)
 358              		.cfi_offset 8, -8
 359 01d8 13040101 		addi	s0,sp,16
 360              		.cfi_def_cfa 8, 0
 230:src/Riscv.cpp ****     uint64 x = 0x2;
 361              		.loc 1 230 5
 362              	.LVL23:
 231:src/Riscv.cpp ****     __asm__ volatile("csrc sie, %0"::"r"(x));
 363              		.loc 1 231 5
 364              		.loc 1 231 45 is_stmt 0
 365 01dc 93072000 		li	a5,2
 366              	#APP
 367              	# 231 "src/Riscv.cpp" 1
 232              	}
 368              		csrc sie, a5
 369              	# 0 "" 2
 370              		.loc 1 232 1
 371              	#NO_APP
 372 01e4 03348100 		ld	s0,8(sp)
 373              		.cfi_restore 8
 374              		.cfi_def_cfa 2, 16
 375 01e8 13010101 		addi	sp,sp,16
 376              		.cfi_def_cfa_offset 0
 377 01ec 67800000 		jr	ra
 378              		.cfi_endproc
 379              	.LFE35:
 381              		.align	2
 382              		.globl	_ZN5Riscv9idleRiscvEPv
 384              	_ZN5Riscv9idleRiscvEPv:
 385              	.LFB36:
 233:src/Riscv.cpp **** 
 234:src/Riscv.cpp **** void Riscv::idleRiscv(void* p)
 235:src/Riscv.cpp **** {
 386              		.loc 1 235 1 is_stmt 1
 387              		.cfi_startproc
 388              	.LVL24:
GAS LISTING /tmp/cclE82Jg.s 			page 16


 389 01f0 130101FF 		addi	sp,sp,-16
 390              		.cfi_def_cfa_offset 16
 391 01f4 23348100 		sd	s0,8(sp)
 392              		.cfi_offset 8, -8
 393 01f8 13040101 		addi	s0,sp,16
 394              		.cfi_def_cfa 8, 0
 395              	.L28:
 236:src/Riscv.cpp ****     while(true)
 396              		.loc 1 236 5 discriminator 1
 397              		.loc 1 236 5 discriminator 1
 398 01fc 6F000000 		j	.L28
 399              		.cfi_endproc
 400              	.LFE36:
 402              		.align	2
 403              		.globl	_ZN5Riscv13w_a0_sscratchEv
 405              	_ZN5Riscv13w_a0_sscratchEv:
 406              	.LFB37:
 237:src/Riscv.cpp ****     {
 238:src/Riscv.cpp **** 
 239:src/Riscv.cpp ****     }
 240:src/Riscv.cpp **** }
 241:src/Riscv.cpp **** 
 242:src/Riscv.cpp **** void Riscv::w_a0_sscratch()
 243:src/Riscv.cpp **** {
 407              		.loc 1 243 1
 408              		.cfi_startproc
 409 0200 130101FF 		addi	sp,sp,-16
 410              		.cfi_def_cfa_offset 16
 411 0204 23348100 		sd	s0,8(sp)
 412              		.cfi_offset 8, -8
 413 0208 13040101 		addi	s0,sp,16
 414              		.cfi_def_cfa 8, 0
 244:src/Riscv.cpp ****     uint64 a1Temp;
 415              		.loc 1 244 5
 245:src/Riscv.cpp ****     __asm__ volatile("mv %0, a1":"=r"(a1Temp));
 416              		.loc 1 245 5
 417              		.loc 1 245 47 is_stmt 0
 418              	#APP
 419              	# 245 "src/Riscv.cpp" 1
 246              	    __asm__ volatile("mv a1, %0"::"r"(PCB::running->sscratch));
 420              		mv a5, a1
 421              	# 0 "" 2
 422              	.LVL25:
 423              		.loc 1 246 5 is_stmt 1
 424              		.loc 1 246 53 is_stmt 0
 425              	#NO_APP
 426 0210 17070000 		la	a4,_ZN3PCB7runningE
 426      03370700 
 427 0218 03370700 		ld	a4,0(a4)
 428 021c 03370701 		ld	a4,16(a4)
 429              		.loc 1 246 63
 430              	#APP
 431              	# 246 "src/Riscv.cpp" 1
 247              	    __asm__ volatile("sd a0, 80(a1)");
 432              		mv a1, a4
 433              	# 0 "" 2
 434              		.loc 1 247 5 is_stmt 1
GAS LISTING /tmp/cclE82Jg.s 			page 17


 435              		.loc 1 247 38 is_stmt 0
 436              	# 247 "src/Riscv.cpp" 1
 248              	    __asm__ volatile("mv a1,%0"::"r"(a1Temp));
 437              		sd a0, 80(a1)
 438              	# 0 "" 2
 439              		.loc 1 248 5 is_stmt 1
 440              		.loc 1 248 46 is_stmt 0
 441              	# 248 "src/Riscv.cpp" 1
 249              	}
 442              		mv a1,a5
 443              	# 0 "" 2
 444              		.loc 1 249 1
 445              	#NO_APP
 446 022c 03348100 		ld	s0,8(sp)
 447              		.cfi_restore 8
 448              		.cfi_def_cfa 2, 16
 449 0230 13010101 		addi	sp,sp,16
 450              		.cfi_def_cfa_offset 0
 451 0234 67800000 		jr	ra
 452              		.cfi_endproc
 453              	.LFE37:
 455              		.align	2
 456              		.globl	_ZN5Riscv14changePrivModeEv
 458              	_ZN5Riscv14changePrivModeEv:
 459              	.LFB38:
 250:src/Riscv.cpp **** 
 251:src/Riscv.cpp **** void Riscv::changePrivMode()
 252:src/Riscv.cpp **** {
 460              		.loc 1 252 1 is_stmt 1
 461              		.cfi_startproc
 462 0238 130101FF 		addi	sp,sp,-16
 463              		.cfi_def_cfa_offset 16
 464 023c 23348100 		sd	s0,8(sp)
 465              		.cfi_offset 8, -8
 466 0240 13040101 		addi	s0,sp,16
 467              		.cfi_def_cfa 8, 0
 253:src/Riscv.cpp ****     if(PCB::running->systemThread)
 468              		.loc 1 253 5
 469              		.loc 1 253 22 is_stmt 0
 470 0244 97070000 		la	a5,_ZN3PCB7runningE
 470      83B70700 
 471 024c 83B70700 		ld	a5,0(a5)
 472 0250 83C70700 		lbu	a5,0(a5)
 473              		.loc 1 253 5
 474 0254 638C0700 		beqz	a5,.L33
 254:src/Riscv.cpp ****         Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
 475              		.loc 1 254 9 is_stmt 1
 476              	.LVL26:
 477              	.LBB47:
 478              	.LBB48:
 193:src/../h/Riscv.hpp **** }
 479              		.loc 2 193 5
 193:src/../h/Riscv.hpp **** }
 480              		.loc 2 193 54 is_stmt 0
 481 0258 93070010 		li	a5,256
 482              	#APP
 483              	# 193 "src/../h/Riscv.hpp" 1
GAS LISTING /tmp/cclE82Jg.s 			page 18


 484              		csrs sstatus, a5
 485              	# 0 "" 2
 486              	.LVL27:
 487              	#NO_APP
 488              	.L32:
 489              	.LBE48:
 490              	.LBE47:
 255:src/Riscv.cpp ****     else
 256:src/Riscv.cpp ****         Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
 257:src/Riscv.cpp **** }
 491              		.loc 1 257 1
 492 0260 03348100 		ld	s0,8(sp)
 493              		.cfi_remember_state
 494              		.cfi_restore 8
 495              		.cfi_def_cfa 2, 16
 496 0264 13010101 		addi	sp,sp,16
 497              		.cfi_def_cfa_offset 0
 498 0268 67800000 		jr	ra
 499              	.L33:
 500              		.cfi_restore_state
 256:src/Riscv.cpp **** }
 501              		.loc 1 256 9 is_stmt 1
 502              	.LVL28:
 503              	.LBB49:
 504              	.LBB50:
 197:src/../h/Riscv.hpp **** }
 505              		.loc 2 197 5
 197:src/../h/Riscv.hpp **** }
 506              		.loc 2 197 54 is_stmt 0
 507 026c 93070010 		li	a5,256
 508              	#APP
 509              	# 197 "src/../h/Riscv.hpp" 1
 510              		csrc sstatus, a5
 511              	# 0 "" 2
 512              	.LVL29:
 513              	#NO_APP
 514              	.LBE50:
 515              	.LBE49:
 516              		.loc 1 257 1
 517 0274 6FF0DFFE 		j	.L32
 518              		.cfi_endproc
 519              	.LFE38:
 521              		.align	2
 522              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 524              	_ZN5Riscv20handleSupervisorTrapEv:
 525              	.LFB32:
  60:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(PCB::savedRegA4));
 526              		.loc 1 60 1 is_stmt 1
 527              		.cfi_startproc
 528 0278 130101F9 		addi	sp,sp,-112
 529              		.cfi_def_cfa_offset 112
 530 027c 23341106 		sd	ra,104(sp)
 531 0280 23308106 		sd	s0,96(sp)
 532 0284 233C9104 		sd	s1,88(sp)
 533              		.cfi_offset 1, -8
 534              		.cfi_offset 8, -16
 535              		.cfi_offset 9, -24
GAS LISTING /tmp/cclE82Jg.s 			page 19


 536 0288 13040107 		addi	s0,sp,112
 537              		.cfi_def_cfa 8, 0
  61:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
 538              		.loc 1 61 5
  61:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
 539              		.loc 1 61 58 is_stmt 0
 540              	#APP
 541              	# 61 "src/Riscv.cpp" 1
 542              		mv a4, a4
 543              	# 0 "" 2
 544              	#NO_APP
 545 0290 97070000 		la	a5,_ZN3PCB10savedRegA4E
 545      83B70700 
 546 0298 23B0E700 		sd	a4,0(a5)
  62:src/Riscv.cpp **** 
 547              		.loc 1 62 5 is_stmt 1
  62:src/Riscv.cpp **** 
 548              		.loc 1 62 61 is_stmt 0
 549 029c 97070000 		la	a5,_ZN3PCB7runningE
 549      83B70700 
 550 02a4 83B70700 		ld	a5,0(a5)
  62:src/Riscv.cpp **** 
 551              		.loc 1 62 71
 552              	#APP
 553              	# 62 "src/Riscv.cpp" 1
 554              		csrr a4, sscratch
 555              	# 0 "" 2
 556              	#NO_APP
 557 02ac 23B8E700 		sd	a4,16(a5)
  64:src/Riscv.cpp **** 
 558              		.loc 1 64 5 is_stmt 1
 559              	.LBB51:
 560              	.LBB52:
 118:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
 561              		.loc 2 118 5
 119:src/../h/Riscv.hpp ****     return scause;
 562              		.loc 2 119 5
 119:src/../h/Riscv.hpp ****     return scause;
 563              		.loc 2 119 55 is_stmt 0
 564              	#APP
 565              	# 119 "src/../h/Riscv.hpp" 1
 566              		csrr a5, scause
 567              	# 0 "" 2
 568              	#NO_APP
 569 02b4 233CF4FA 		sd	a5,-72(s0)
 120:src/../h/Riscv.hpp **** }
 570              		.loc 2 120 5 is_stmt 1
 120:src/../h/Riscv.hpp **** }
 571              		.loc 2 120 12 is_stmt 0
 572 02b8 833784FB 		ld	a5,-72(s0)
 573              	.LVL30:
 574              	.LBE52:
 575              	.LBE51:
  66:src/Riscv.cpp ****     {
 576              		.loc 1 66 5 is_stmt 1
 577              	.LBB53:
 578 02bc 13079000 		li	a4,9
GAS LISTING /tmp/cclE82Jg.s 			page 20


 579 02c0 636EF702 		bgtu	a5,a4,.L37
 580 02c4 13078000 		li	a4,8
 581 02c8 63F4E718 		bgeu	a5,a4,.L38
 582 02cc 13075000 		li	a4,5
 583 02d0 638AE716 		beq	a5,a4,.L39
 584 02d4 13077000 		li	a4,7
 585 02d8 6398E700 		bne	a5,a4,.L66
 586              	.LBB54:
 129:src/Riscv.cpp ****         {
 587              		.loc 1 129 9
 130:src/Riscv.cpp ****             //trapPrintString("write interrupt\n");
 588              		.loc 1 130 9
 132:src/Riscv.cpp ****             break;
 589              		.loc 1 132 13
 132:src/Riscv.cpp ****             break;
 590              		.loc 1 132 35 is_stmt 0
 591 02dc 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 591      E7800000 
 592              	.LVL31:
 133:src/Riscv.cpp ****         }
 593              		.loc 1 133 13 is_stmt 1
 594 02e4 6F000012 		j	.L36
 595              	.LVL32:
 596              	.L66:
 597              	.LBE54:
  66:src/Riscv.cpp ****     {
 598              		.loc 1 66 5 is_stmt 0
 599 02e8 13072000 		li	a4,2
 600 02ec 639CE710 		bne	a5,a4,.L36
 601              	.LBB85:
 117:src/Riscv.cpp ****         {
 602              		.loc 1 117 9 is_stmt 1
 118:src/Riscv.cpp ****             //trapPrintString("operation interrupt\n");
 603              		.loc 1 118 9
 120:src/Riscv.cpp ****             break;
 604              		.loc 1 120 13
 120:src/Riscv.cpp ****             break;
 605              		.loc 1 120 35 is_stmt 0
 606 02f0 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 606      E7800000 
 607              	.LVL33:
 121:src/Riscv.cpp ****         }
 608              		.loc 1 121 13 is_stmt 1
 609 02f8 6F00C010 		j	.L36
 610              	.LVL34:
 611              	.L37:
 612              	.LBE85:
  66:src/Riscv.cpp ****     {
 613              		.loc 1 66 5 is_stmt 0
 614 02fc 1307F0FF 		li	a4,-1
 615 0300 1317F703 		slli	a4,a4,63
 616 0304 13071700 		addi	a4,a4,1
 617 0308 638AE706 		beq	a5,a4,.L43
 618 030c 1307F0FF 		li	a4,-1
 619 0310 1317F703 		slli	a4,a4,63
 620 0314 13079700 		addi	a4,a4,9
 621 0318 6396E70E 		bne	a5,a4,.L36
GAS LISTING /tmp/cclE82Jg.s 			page 21


 622              	.LBB86:
  91:src/Riscv.cpp ****         {
 623              		.loc 1 91 9 is_stmt 1
  92:src/Riscv.cpp ****             uint64 x = CONSOLE_STATUS;
 624              		.loc 1 92 9
 625              	.LBB55:
  93:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
 626              		.loc 1 93 13
  93:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
 627              		.loc 1 93 20 is_stmt 0
 628 031c 97070000 		la	a5,CONSOLE_STATUS
 628      83B70700 
 629              	.LVL35:
 630 0324 83B70700 		ld	a5,0(a5)
 631              	.LVL36:
  94:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
 632              		.loc 1 94 13 is_stmt 1
  94:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
 633              		.loc 1 94 50 is_stmt 0
 634              	#APP
 635              	# 94 "src/Riscv.cpp" 1
  95:src/Riscv.cpp ****             uint64 operation;
 636              		mv a0, a5
 637              	# 0 "" 2
 638              		.loc 1 95 13 is_stmt 1
  95:src/Riscv.cpp ****             uint64 operation;
 639              		.loc 1 95 45 is_stmt 0
 640              	# 95 "src/Riscv.cpp" 1
  96:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" :  "=r"(operation));
 641              		lb a1, 0(a0)
 642              	# 0 "" 2
 643              		.loc 1 96 13 is_stmt 1
  97:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
 644              		.loc 1 97 13
  97:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
 645              		.loc 1 97 61 is_stmt 0
 646              	# 97 "src/Riscv.cpp" 1
 647              		mv a5, a1
 648              	# 0 "" 2
 649              	.LVL37:
  98:src/Riscv.cpp ****             {
 650              		.loc 1 98 13 is_stmt 1
 651              	#NO_APP
 652              	.LBB56:
  98:src/Riscv.cpp ****             {
 653              		.loc 1 98 26 is_stmt 0
 654 0334 93F71700 		andi	a5,a5,1
 655              	.LVL38:
  98:src/Riscv.cpp ****             {
 656              		.loc 1 98 13
 657 0338 63880702 		beqz	a5,.L46
 658              	.LBB57:
 100:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
 659              		.loc 1 100 17 is_stmt 1
 100:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
 660              		.loc 1 100 19 is_stmt 0
 661 033c 97070000 		la	a5,CONSOLE_TX_DATA
GAS LISTING /tmp/cclE82Jg.s 			page 22


 661      83B70700 
 662 0344 83B70700 		ld	a5,0(a5)
 663              	.LVL39:
 101:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
 664              		.loc 1 101 17 is_stmt 1
 101:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
 665              		.loc 1 101 54 is_stmt 0
 666              	#APP
 667              	# 101 "src/Riscv.cpp" 1
 102:src/Riscv.cpp ****                 char c;
 668              		mv a0, a5
 669              	# 0 "" 2
 670              		.loc 1 102 17 is_stmt 1
 102:src/Riscv.cpp ****                 char c;
 671              		.loc 1 102 48 is_stmt 0
 672              	# 102 "src/Riscv.cpp" 1
 103:src/Riscv.cpp ****                 __asm__ volatile("mv %0, a1" :  "=r"(c));
 673              		lb a1,0(a0)
 674              	# 0 "" 2
 675              		.loc 1 103 17 is_stmt 1
 104:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
 676              		.loc 1 104 17
 104:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
 677              		.loc 1 104 57 is_stmt 0
 678              	# 104 "src/Riscv.cpp" 1
 679              		mv a0, a1
 680              	# 0 "" 2
 681              	#NO_APP
 682 0354 1375F50F 		andi	a0,a0,0xff
 683              	.LVL40:
 105:src/Riscv.cpp ****                 {
 684              		.loc 1 105 17 is_stmt 1
 105:src/Riscv.cpp ****                 {
 685              		.loc 1 105 42 is_stmt 0
 686 0358 97070000 		la	a5,_ZN8KConsole11pendingGetcE
 686      83B70700 
 687              	.LVL41:
 688 0360 83B70700 		ld	a5,0(a5)
 105:src/Riscv.cpp ****                 {
 689              		.loc 1 105 17
 690 0364 6392070C 		bnez	a5,.L67
 691              	.LVL42:
 692              	.L46:
 693              	.LBE57:
 694              	.LBE56:
 113:src/Riscv.cpp **** 
 695              		.loc 1 113 13 is_stmt 1
 113:src/Riscv.cpp **** 
 696              		.loc 1 113 26 is_stmt 0
 697 0368 97000000 		call	plic_claim@plt
 697      E7800000 
 698              	.LVL43:
 699 0370 97000000 		call	plic_complete@plt
 699      E7800000 
 700              	.LVL44:
 115:src/Riscv.cpp ****         }
 701              		.loc 1 115 13 is_stmt 1
GAS LISTING /tmp/cclE82Jg.s 			page 23


 702 0378 6F00C008 		j	.L36
 703              	.LVL45:
 704              	.L43:
 705              	.LBE55:
  68:src/Riscv.cpp ****         {
 706              		.loc 1 68 9
  69:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc();
 707              		.loc 1 69 9
 708              	.LBB60:
  70:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 709              		.loc 1 70 13
 710              	.LBB61:
 711              	.LBB62:
 128:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 712              		.loc 2 128 5
 129:src/../h/Riscv.hpp ****     return sepc;
 713              		.loc 2 129 5
 129:src/../h/Riscv.hpp ****     return sepc;
 714              		.loc 2 129 51 is_stmt 0
 715              	#APP
 716              	# 129 "src/../h/Riscv.hpp" 1
 717              		csrr a5, sepc
 718              	# 0 "" 2
 719              	.LVL46:
 720              	#NO_APP
 721 0380 2334F4FC 		sd	a5,-56(s0)
 130:src/../h/Riscv.hpp **** }
 722              		.loc 2 130 5 is_stmt 1
 130:src/../h/Riscv.hpp **** }
 723              		.loc 2 130 12 is_stmt 0
 724 0384 833784FC 		ld	a5,-56(s0)
 725              	.LBE62:
 726              	.LBE61:
  70:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 727              		.loc 1 70 50
 728 0388 233CF4F8 		sd	a5,-104(s0)
  71:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
 729              		.loc 1 71 13 is_stmt 1
 730              	.LBB63:
 731              	.LBB64:
 199:src/../h/Riscv.hpp **** 
 200:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 201:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 732              		.loc 2 201 5
 202:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sstatus" : "=r"(sstatus));
 733              		.loc 2 202 5
 734              		.loc 2 202 57 is_stmt 0
 735              	#APP
 736              	# 202 "src/../h/Riscv.hpp" 1
 203              	    return sstatus;
 737              		csrr a5, sstatus
 738              	# 0 "" 2
 739              	#NO_APP
 740 0390 2330F4FC 		sd	a5,-64(s0)
 741              		.loc 2 203 5 is_stmt 1
 742              		.loc 2 203 12 is_stmt 0
 743 0394 833704FC 		ld	a5,-64(s0)
GAS LISTING /tmp/cclE82Jg.s 			page 24


 744              	.LBE64:
 745              	.LBE63:
  71:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
 746              		.loc 1 71 56
 747 0398 2330F4FA 		sd	a5,-96(s0)
  72:src/Riscv.cpp ****             //KConsole::trapPrintString("timerInterrupt\n");
 748              		.loc 1 72 13 is_stmt 1
 749              	.LVL47:
 750              	.LBB65:
 751              	.LBB66:
 167:src/../h/Riscv.hpp **** }
 752              		.loc 2 167 5
 167:src/../h/Riscv.hpp **** }
 753              		.loc 2 167 50 is_stmt 0
 754 039c 93072000 		li	a5,2
 755              	#APP
 756              	# 167 "src/../h/Riscv.hpp" 1
 757              		csrc sip, a5
 758              	# 0 "" 2
 759              	.LVL48:
 760              	#NO_APP
 761              	.LBE66:
 762              	.LBE65:
  75:src/Riscv.cpp ****             //KConsole::trapPrintInt(totalTime);
 763              		.loc 1 75 13 is_stmt 1
  75:src/Riscv.cpp ****             //KConsole::trapPrintInt(totalTime);
 764              		.loc 1 75 22 is_stmt 0
 765 03a4 17070000 		lla	a4,.LANCHOR0
 765      13070700 
 766 03ac 83378700 		ld	a5,8(a4)
 767 03b0 93871700 		addi	a5,a5,1
 768 03b4 2334F700 		sd	a5,8(a4)
  78:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
 769              		.loc 1 78 13 is_stmt 1
  78:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
 770              		.loc 1 78 34 is_stmt 0
 771 03b8 97040000 		la	s1,_ZN3PCB16timeSliceCounterE
 771      83B40400 
 772 03c0 83B70400 		ld	a5,0(s1)
 773 03c4 93871700 		addi	a5,a5,1
 774 03c8 23B0F400 		sd	a5,0(s1)
  79:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
 775              		.loc 1 79 13 is_stmt 1
  79:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
 776              		.loc 1 79 40 is_stmt 0
 777 03cc 97000000 		call	_ZN12SleepPCBList13tryToWakePCBsEv@plt
 777      E7800000 
 778              	.LVL49:
  80:src/Riscv.cpp ****             {
 779              		.loc 1 80 13 is_stmt 1
  80:src/Riscv.cpp ****             {
 780              		.loc 1 80 68 is_stmt 0
 781 03d4 97070000 		la	a5,_ZN3PCB7runningE
 781      83B70700 
 782 03dc 83B70700 		ld	a5,0(a5)
 783              	.LVL50:
 784              	.LBB67:
GAS LISTING /tmp/cclE82Jg.s 			page 25


 785              	.LBB68:
 786              		.file 3 "src/../h/PCB.hpp"
   1:src/../h/PCB.hpp **** //
   2:src/../h/PCB.hpp **** // Created by os on 4/27/22.
   3:src/../h/PCB.hpp **** //
   4:src/../h/PCB.hpp **** 
   5:src/../h/PCB.hpp **** #ifndef PROJECT_BASE_V1_0_PCB_HPP
   6:src/../h/PCB.hpp **** #define PROJECT_BASE_V1_0_PCB_HPP
   7:src/../h/PCB.hpp **** 
   8:src/../h/PCB.hpp **** #include "../lib/hw.h"
   9:src/../h/PCB.hpp **** 
  10:src/../h/PCB.hpp **** class PCB
  11:src/../h/PCB.hpp **** {
  12:src/../h/PCB.hpp **** private:
  13:src/../h/PCB.hpp ****     static uint64 savedRegA4;
  14:src/../h/PCB.hpp **** 
  15:src/../h/PCB.hpp ****     using Body = void (*)(void*);
  16:src/../h/PCB.hpp **** 
  17:src/../h/PCB.hpp ****     PCB(Body body,  void* args, void* stack_space, uint64 timeSlice);
  18:src/../h/PCB.hpp ****     ~PCB();
  19:src/../h/PCB.hpp **** 
  20:src/../h/PCB.hpp ****     void start();
  21:src/../h/PCB.hpp ****     static void dispatch();
  22:src/../h/PCB.hpp ****     static void sleep(time_t);
  23:src/../h/PCB.hpp **** 
  24:src/../h/PCB.hpp ****     static PCB* running;
  25:src/../h/PCB.hpp **** 
  26:src/../h/PCB.hpp ****     static uint64 timeSliceCounter;
  27:src/../h/PCB.hpp ****     uint64 getTimeSlice() { return timeSlice;}
 787              		.loc 3 27 29 is_stmt 1
 788              		.loc 3 27 36 is_stmt 0
 789 03e0 83B78701 		ld	a5,24(a5)
 790              	.LVL51:
 791              	.LBE68:
 792              	.LBE67:
  80:src/Riscv.cpp ****             {
 793              		.loc 1 80 39
 794 03e4 03B70400 		ld	a4,0(s1)
  80:src/Riscv.cpp ****             {
 795              		.loc 1 80 13
 796 03e8 6378F702 		bgeu	a4,a5,.L68
 797              	.L45:
  86:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 798              		.loc 1 86 13 is_stmt 1
  86:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 799              		.loc 1 86 29 is_stmt 0
 800 03ec 833704FA 		ld	a5,-96(s0)
 801              	.LVL52:
 802              	.LBB69:
 803              	.LBB70:
 204:src/../h/Riscv.hpp **** }
 205:src/../h/Riscv.hpp **** 
 206:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 207:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sstatus, %0" : :"r"(sstatus));
 804              		.loc 2 207 5 is_stmt 1
 805              		.loc 2 207 57 is_stmt 0
 806              	#APP
GAS LISTING /tmp/cclE82Jg.s 			page 26


 807              	# 207 "src/../h/Riscv.hpp" 1
 208              	}
 808              		csrw sstatus, a5
 809              	# 0 "" 2
 810              	.LVL53:
 811              	#NO_APP
 812              	.LBE70:
 813              	.LBE69:
  87:src/Riscv.cpp ****             changePrivMode();
 814              		.loc 1 87 13 is_stmt 1
  87:src/Riscv.cpp ****             changePrivMode();
 815              		.loc 1 87 26 is_stmt 0
 816 03f4 833784F9 		ld	a5,-104(s0)
 817              	.LVL54:
 818              	.LBB71:
 819              	.LBB72:
 134:src/../h/Riscv.hpp **** }
 820              		.loc 2 134 5 is_stmt 1
 134:src/../h/Riscv.hpp **** }
 821              		.loc 2 134 51 is_stmt 0
 822              	#APP
 823              	# 134 "src/../h/Riscv.hpp" 1
 824              		csrw sepc, a5
 825              	# 0 "" 2
 826              	.LVL55:
 827              	#NO_APP
 828              	.LBE72:
 829              	.LBE71:
  88:src/Riscv.cpp ****             break;
 830              		.loc 1 88 13 is_stmt 1
  88:src/Riscv.cpp ****             break;
 831              		.loc 1 88 27 is_stmt 0
 832 03fc 97000000 		call	_ZN5Riscv14changePrivModeEv
 832      E7800000 
 833              	.LVL56:
  89:src/Riscv.cpp ****         }
 834              		.loc 1 89 13 is_stmt 1
 835              	.L36:
 836              	.LBE60:
 837              	.LBE86:
 838              	.LBE53:
 202:src/Riscv.cpp **** 
 839              		.loc 1 202 1 is_stmt 0
 840 0404 83308106 		ld	ra,104(sp)
 841              		.cfi_remember_state
 842              		.cfi_restore 1
 843 0408 03340106 		ld	s0,96(sp)
 844              		.cfi_restore 8
 845              		.cfi_def_cfa 2, 112
 846 040c 83348105 		ld	s1,88(sp)
 847              		.cfi_restore 9
 848 0410 13010107 		addi	sp,sp,112
 849              		.cfi_def_cfa_offset 0
 850 0414 67800000 		jr	ra
 851              	.L68:
 852              		.cfi_restore_state
 853              	.LBB89:
GAS LISTING /tmp/cclE82Jg.s 			page 27


 854              	.LBB87:
 855              	.LBB73:
  82:src/Riscv.cpp ****                 PCB::dispatch();
 856              		.loc 1 82 17 is_stmt 1
  82:src/Riscv.cpp ****                 PCB::dispatch();
 857              		.loc 1 82 39 is_stmt 0
 858 0418 23B00400 		sd	zero,0(s1)
  83:src/Riscv.cpp ****             }
 859              		.loc 1 83 17 is_stmt 1
  83:src/Riscv.cpp ****             }
 860              		.loc 1 83 30 is_stmt 0
 861 041c 97000000 		call	_ZN3PCB8dispatchEv@plt
 861      E7800000 
 862              	.LVL57:
 863 0424 6FF09FFC 		j	.L45
 864              	.LVL58:
 865              	.L67:
 866              	.LBE73:
 867              	.LBB74:
 868              	.LBB59:
 869              	.LBB58:
 107:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
 870              		.loc 1 107 21 is_stmt 1
 107:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
 871              		.loc 1 107 42 is_stmt 0
 872 0428 9387F7FF 		addi	a5,a5,-1
 873 042c 17070000 		la	a4,_ZN8KConsole11pendingGetcE
 873      03370700 
 874 0434 2330F700 		sd	a5,0(a4)
 108:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
 875              		.loc 1 108 21 is_stmt 1
 108:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
 876              		.loc 1 108 48 is_stmt 0
 877 0438 97000000 		call	_ZN8KConsole17putCharacterInputEc@plt
 877      E7800000 
 878              	.LVL59:
 879 0440 6FF09FF2 		j	.L46
 880              	.LVL60:
 881              	.L39:
 882              	.LBE58:
 883              	.LBE59:
 884              	.LBE74:
 123:src/Riscv.cpp ****         {
 885              		.loc 1 123 9 is_stmt 1
 124:src/Riscv.cpp ****             //trapPrintString("read interrupt\n");
 886              		.loc 1 124 9
 126:src/Riscv.cpp ****             break;
 887              		.loc 1 126 13
 126:src/Riscv.cpp ****             break;
 888              		.loc 1 126 35 is_stmt 0
 889 0444 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 889      E7800000 
 890              	.LVL61:
 127:src/Riscv.cpp ****         }
 891              		.loc 1 127 13 is_stmt 1
 892 044c 6FF09FFB 		j	.L36
 893              	.LVL62:
GAS LISTING /tmp/cclE82Jg.s 			page 28


 894              	.L38:
 135:src/Riscv.cpp ****         case ecallUserInterrupt:
 895              		.loc 1 135 9
 136:src/Riscv.cpp ****         {
 896              		.loc 1 136 9
 137:src/Riscv.cpp ****             uint64 operation;
 897              		.loc 1 137 9
 898              	.LBB75:
 138:src/Riscv.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
 899              		.loc 1 138 13
 139:src/Riscv.cpp **** 
 900              		.loc 1 139 13
 139:src/Riscv.cpp **** 
 901              		.loc 1 139 61 is_stmt 0
 902              	#APP
 903              	# 139 "src/Riscv.cpp" 1
 904              		mv a5, a0
 905              	# 0 "" 2
 906              	.LVL63:
 141:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 907              		.loc 1 141 13 is_stmt 1
 908              	#NO_APP
 909              	.LBB76:
 910              	.LBB77:
 128:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 911              		.loc 2 128 5
 129:src/../h/Riscv.hpp ****     return sepc;
 912              		.loc 2 129 5
 129:src/../h/Riscv.hpp ****     return sepc;
 913              		.loc 2 129 51 is_stmt 0
 914              	#APP
 915              	# 129 "src/../h/Riscv.hpp" 1
 916              		csrr a4, sepc
 917              	# 0 "" 2
 918              	#NO_APP
 919 0458 233CE4FC 		sd	a4,-40(s0)
 130:src/../h/Riscv.hpp **** }
 920              		.loc 2 130 5 is_stmt 1
 130:src/../h/Riscv.hpp **** }
 921              		.loc 2 130 12 is_stmt 0
 922 045c 033784FD 		ld	a4,-40(s0)
 923              	.LBE77:
 924              	.LBE76:
 141:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 925              		.loc 1 141 52
 926 0460 13074700 		addi	a4,a4,4
 141:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 927              		.loc 1 141 54
 928 0464 2334E4FA 		sd	a4,-88(s0)
 142:src/Riscv.cpp **** 
 929              		.loc 1 142 13 is_stmt 1
 930              	.LBB78:
 931              	.LBB79:
 201:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sstatus" : "=r"(sstatus));
 932              		.loc 2 201 5
 202:src/../h/Riscv.hpp ****     return sstatus;
 933              		.loc 2 202 5
GAS LISTING /tmp/cclE82Jg.s 			page 29


 202:src/../h/Riscv.hpp ****     return sstatus;
 934              		.loc 2 202 57 is_stmt 0
 935              	#APP
 936              	# 202 "src/../h/Riscv.hpp" 1
 937              		csrr a4, sstatus
 938              	# 0 "" 2
 939              	#NO_APP
 940 046c 2338E4FC 		sd	a4,-48(s0)
 203:src/../h/Riscv.hpp **** }
 941              		.loc 2 203 5 is_stmt 1
 203:src/../h/Riscv.hpp **** }
 942              		.loc 2 203 12 is_stmt 0
 943 0470 033704FD 		ld	a4,-48(s0)
 944              	.LBE79:
 945              	.LBE78:
 142:src/Riscv.cpp **** 
 946              		.loc 1 142 56
 947 0474 2338E4FA 		sd	a4,-80(s0)
 144:src/Riscv.cpp ****             {
 948              		.loc 1 144 13 is_stmt 1
 949 0478 13073004 		li	a4,67
 950 047c 6364F702 		bgtu	a5,a4,.L47
 951 0480 93972700 		slli	a5,a5,2
 952              	.LVL64:
 953 0484 17070000 		lla	a4,.L49
 953      13070700 
 954 048c B387E700 		add	a5,a5,a4
 955 0490 83A70700 		lw	a5,0(a5)
 956 0494 B387E700 		add	a5,a5,a4
 957 0498 67800700 		jr	a5
 958              		.section	.rodata
 959              		.align	2
 960              		.align	2
 961              	.L49:
 962 0000 00000000 		.word	.L47-.L49
 963 0004 00000000 		.word	.L64-.L49
 964 0008 00000000 		.word	.L63-.L49
 965 000c 00000000 		.word	.L47-.L49
 966 0010 00000000 		.word	.L47-.L49
 967 0014 00000000 		.word	.L47-.L49
 968 0018 00000000 		.word	.L47-.L49
 969 001c 00000000 		.word	.L47-.L49
 970 0020 00000000 		.word	.L47-.L49
 971 0024 00000000 		.word	.L47-.L49
 972 0028 00000000 		.word	.L47-.L49
 973 002c 00000000 		.word	.L47-.L49
 974 0030 00000000 		.word	.L47-.L49
 975 0034 00000000 		.word	.L47-.L49
 976 0038 00000000 		.word	.L47-.L49
 977 003c 00000000 		.word	.L47-.L49
 978 0040 00000000 		.word	.L47-.L49
 979 0044 00000000 		.word	.L62-.L49
 980 0048 00000000 		.word	.L61-.L49
 981 004c 00000000 		.word	.L60-.L49
 982 0050 00000000 		.word	.L59-.L49
 983 0054 00000000 		.word	.L58-.L49
 984 0058 00000000 		.word	.L57-.L49
GAS LISTING /tmp/cclE82Jg.s 			page 30


 985 005c 00000000 		.word	.L47-.L49
 986 0060 00000000 		.word	.L47-.L49
 987 0064 00000000 		.word	.L47-.L49
 988 0068 00000000 		.word	.L47-.L49
 989 006c 00000000 		.word	.L47-.L49
 990 0070 00000000 		.word	.L47-.L49
 991 0074 00000000 		.word	.L47-.L49
 992 0078 00000000 		.word	.L47-.L49
 993 007c 00000000 		.word	.L47-.L49
 994 0080 00000000 		.word	.L47-.L49
 995 0084 00000000 		.word	.L56-.L49
 996 0088 00000000 		.word	.L55-.L49
 997 008c 00000000 		.word	.L54-.L49
 998 0090 00000000 		.word	.L53-.L49
 999 0094 00000000 		.word	.L47-.L49
 1000 0098 00000000 		.word	.L47-.L49
 1001 009c 00000000 		.word	.L47-.L49
 1002 00a0 00000000 		.word	.L47-.L49
 1003 00a4 00000000 		.word	.L47-.L49
 1004 00a8 00000000 		.word	.L47-.L49
 1005 00ac 00000000 		.word	.L47-.L49
 1006 00b0 00000000 		.word	.L47-.L49
 1007 00b4 00000000 		.word	.L47-.L49
 1008 00b8 00000000 		.word	.L47-.L49
 1009 00bc 00000000 		.word	.L47-.L49
 1010 00c0 00000000 		.word	.L47-.L49
 1011 00c4 00000000 		.word	.L52-.L49
 1012 00c8 00000000 		.word	.L47-.L49
 1013 00cc 00000000 		.word	.L47-.L49
 1014 00d0 00000000 		.word	.L47-.L49
 1015 00d4 00000000 		.word	.L47-.L49
 1016 00d8 00000000 		.word	.L47-.L49
 1017 00dc 00000000 		.word	.L47-.L49
 1018 00e0 00000000 		.word	.L47-.L49
 1019 00e4 00000000 		.word	.L47-.L49
 1020 00e8 00000000 		.word	.L47-.L49
 1021 00ec 00000000 		.word	.L47-.L49
 1022 00f0 00000000 		.word	.L47-.L49
 1023 00f4 00000000 		.word	.L47-.L49
 1024 00f8 00000000 		.word	.L47-.L49
 1025 00fc 00000000 		.word	.L47-.L49
 1026 0100 00000000 		.word	.L47-.L49
 1027 0104 00000000 		.word	.L51-.L49
 1028 0108 00000000 		.word	.L50-.L49
 1029 010c 00000000 		.word	.L48-.L49
 1030              		.text
 1031              	.L64:
 146:src/Riscv.cpp ****                     MemoryAllocator::memAllocHandler();
 1032              		.loc 1 146 17
 147:src/Riscv.cpp ****                     break;
 1033              		.loc 1 147 21
 147:src/Riscv.cpp ****                     break;
 1034              		.loc 1 147 53 is_stmt 0
 1035 049c 97000000 		call	_ZN15MemoryAllocator15memAllocHandlerEv@plt
 1035      E7800000 
 1036              	.LVL65:
 148:src/Riscv.cpp ****                 case MemoryAllocator::MEM_FREE:
GAS LISTING /tmp/cclE82Jg.s 			page 31


 1037              		.loc 1 148 21 is_stmt 1
 1038              	.L47:
 196:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 1039              		.loc 1 196 13
 196:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 1040              		.loc 1 196 29 is_stmt 0
 1041 04a4 833704FB 		ld	a5,-80(s0)
 1042              	.LVL66:
 1043              	.LBB80:
 1044              	.LBB81:
 207:src/../h/Riscv.hpp **** }
 1045              		.loc 2 207 5 is_stmt 1
 207:src/../h/Riscv.hpp **** }
 1046              		.loc 2 207 57 is_stmt 0
 1047              	#APP
 1048              	# 207 "src/../h/Riscv.hpp" 1
 1049              		csrw sstatus, a5
 1050              	# 0 "" 2
 1051              	.LVL67:
 1052              	#NO_APP
 1053              	.LBE81:
 1054              	.LBE80:
 197:src/Riscv.cpp ****             changePrivMode();
 1055              		.loc 1 197 13 is_stmt 1
 197:src/Riscv.cpp ****             changePrivMode();
 1056              		.loc 1 197 26 is_stmt 0
 1057 04ac 833784FA 		ld	a5,-88(s0)
 1058              	.LVL68:
 1059              	.LBB82:
 1060              	.LBB83:
 134:src/../h/Riscv.hpp **** }
 1061              		.loc 2 134 5 is_stmt 1
 134:src/../h/Riscv.hpp **** }
 1062              		.loc 2 134 51 is_stmt 0
 1063              	#APP
 1064              	# 134 "src/../h/Riscv.hpp" 1
 1065              		csrw sepc, a5
 1066              	# 0 "" 2
 1067              	.LVL69:
 1068              	#NO_APP
 1069              	.LBE83:
 1070              	.LBE82:
 198:src/Riscv.cpp ****             break;
 1071              		.loc 1 198 13 is_stmt 1
 198:src/Riscv.cpp ****             break;
 1072              		.loc 1 198 27 is_stmt 0
 1073 04b4 97000000 		call	_ZN5Riscv14changePrivModeEv
 1073      E7800000 
 1074              	.LVL70:
 199:src/Riscv.cpp ****         }
 1075              		.loc 1 199 13 is_stmt 1
 1076              	.LBE75:
 1077              	.LBE87:
 1078              	.LBE89:
 202:src/Riscv.cpp **** 
 1079              		.loc 1 202 1 is_stmt 0
 1080 04bc 6FF09FF4 		j	.L36
GAS LISTING /tmp/cclE82Jg.s 			page 32


 1081              	.L63:
 1082              	.LBB90:
 1083              	.LBB88:
 1084              	.LBB84:
 149:src/Riscv.cpp ****                     MemoryAllocator::memFreeHandler();
 1085              		.loc 1 149 17 is_stmt 1
 150:src/Riscv.cpp ****                     break;
 1086              		.loc 1 150 21
 150:src/Riscv.cpp ****                     break;
 1087              		.loc 1 150 52 is_stmt 0
 1088 04c0 97000000 		call	_ZN15MemoryAllocator14memFreeHandlerEv@plt
 1088      E7800000 
 1089              	.LVL71:
 151:src/Riscv.cpp ****                 case PCB::THREAD_MAKE_PCB:
 1090              		.loc 1 151 21 is_stmt 1
 1091 04c8 6FF0DFFD 		j	.L47
 1092              	.L59:
 152:src/Riscv.cpp ****                     PCB::threadMakePCBHandler();
 1093              		.loc 1 152 17
 153:src/Riscv.cpp ****                     break;
 1094              		.loc 1 153 21
 153:src/Riscv.cpp ****                     break;
 1095              		.loc 1 153 46 is_stmt 0
 1096 04cc 97000000 		call	_ZN3PCB20threadMakePCBHandlerEv@plt
 1096      E7800000 
 1097              	.LVL72:
 154:src/Riscv.cpp ****                 case PCB::THREAD_CREATE:
 1098              		.loc 1 154 21 is_stmt 1
 1099 04d4 6FF01FFD 		j	.L47
 1100              	.L62:
 155:src/Riscv.cpp ****                     PCB::threadCreateHandler();
 1101              		.loc 1 155 17
 156:src/Riscv.cpp ****                     break;
 1102              		.loc 1 156 21
 156:src/Riscv.cpp ****                     break;
 1103              		.loc 1 156 45 is_stmt 0
 1104 04d8 97000000 		call	_ZN3PCB19threadCreateHandlerEv@plt
 1104      E7800000 
 1105              	.LVL73:
 157:src/Riscv.cpp ****                 case PCB::THREAD_START:
 1106              		.loc 1 157 21 is_stmt 1
 1107 04e0 6FF05FFC 		j	.L47
 1108              	.L58:
 158:src/Riscv.cpp ****                     PCB::threadStartHandler();
 1109              		.loc 1 158 17
 159:src/Riscv.cpp ****                     break;
 1110              		.loc 1 159 21
 159:src/Riscv.cpp ****                     break;
 1111              		.loc 1 159 44 is_stmt 0
 1112 04e4 97000000 		call	_ZN3PCB18threadStartHandlerEv@plt
 1112      E7800000 
 1113              	.LVL74:
 160:src/Riscv.cpp ****                 case PCB::THREAD_DISPATCH:
 1114              		.loc 1 160 21 is_stmt 1
 1115 04ec 6FF09FFB 		j	.L47
 1116              	.L60:
 161:src/Riscv.cpp ****                     PCB::threadDispatchHandler();
GAS LISTING /tmp/cclE82Jg.s 			page 33


 1117              		.loc 1 161 17
 162:src/Riscv.cpp ****                     break;
 1118              		.loc 1 162 21
 162:src/Riscv.cpp ****                     break;
 1119              		.loc 1 162 47 is_stmt 0
 1120 04f0 97000000 		call	_ZN3PCB21threadDispatchHandlerEv@plt
 1120      E7800000 
 1121              	.LVL75:
 163:src/Riscv.cpp ****                 case PCB::THREAD_EXIT:
 1122              		.loc 1 163 21 is_stmt 1
 1123 04f8 6FF0DFFA 		j	.L47
 1124              	.L61:
 164:src/Riscv.cpp ****                     PCB::threadExitHandler();
 1125              		.loc 1 164 17
 165:src/Riscv.cpp ****                     break;
 1126              		.loc 1 165 21
 165:src/Riscv.cpp ****                     break;
 1127              		.loc 1 165 43 is_stmt 0
 1128 04fc 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 1128      E7800000 
 1129              	.LVL76:
 166:src/Riscv.cpp ****                 case PCB::TIME_SLEEP:
 1130              		.loc 1 166 21 is_stmt 1
 1131 0504 6FF01FFA 		j	.L47
 1132              	.L52:
 167:src/Riscv.cpp ****                     PCB::threadSleepHandler();
 1133              		.loc 1 167 17
 168:src/Riscv.cpp ****                     break;
 1134              		.loc 1 168 21
 168:src/Riscv.cpp ****                     break;
 1135              		.loc 1 168 44 is_stmt 0
 1136 0508 97000000 		call	_ZN3PCB18threadSleepHandlerEv@plt
 1136      E7800000 
 1137              	.LVL77:
 169:src/Riscv.cpp ****                 case PCB::THREAD_DEL_PCB:
 1138              		.loc 1 169 21 is_stmt 1
 1139 0510 6FF05FF9 		j	.L47
 1140              	.L57:
 170:src/Riscv.cpp ****                      PCB::threadDelPCBHandler();
 1141              		.loc 1 170 17
 171:src/Riscv.cpp ****                      break;
 1142              		.loc 1 171 22
 171:src/Riscv.cpp ****                      break;
 1143              		.loc 1 171 46 is_stmt 0
 1144 0514 97000000 		call	_ZN3PCB19threadDelPCBHandlerEv@plt
 1144      E7800000 
 1145              	.LVL78:
 172:src/Riscv.cpp ****                 case KSemaphore::SEM_OPEN:
 1146              		.loc 1 172 22 is_stmt 1
 1147 051c 6FF09FF8 		j	.L47
 1148              	.L56:
 173:src/Riscv.cpp ****                     KSemaphore::semOpenHandler();
 1149              		.loc 1 173 17
 174:src/Riscv.cpp ****                     break;
 1150              		.loc 1 174 21
 174:src/Riscv.cpp ****                     break;
 1151              		.loc 1 174 47 is_stmt 0
GAS LISTING /tmp/cclE82Jg.s 			page 34


 1152 0520 97000000 		call	_ZN10KSemaphore14semOpenHandlerEv@plt
 1152      E7800000 
 1153              	.LVL79:
 175:src/Riscv.cpp ****                 case KSemaphore::SEM_WAIT:
 1154              		.loc 1 175 21 is_stmt 1
 1155 0528 6FF0DFF7 		j	.L47
 1156              	.L54:
 176:src/Riscv.cpp ****                     KSemaphore::semWaitHandler();
 1157              		.loc 1 176 17
 177:src/Riscv.cpp ****                     break;
 1158              		.loc 1 177 21
 177:src/Riscv.cpp ****                     break;
 1159              		.loc 1 177 47 is_stmt 0
 1160 052c 97000000 		call	_ZN10KSemaphore14semWaitHandlerEv@plt
 1160      E7800000 
 1161              	.LVL80:
 178:src/Riscv.cpp ****                 case KSemaphore::SEM_SIGNAL:
 1162              		.loc 1 178 21 is_stmt 1
 1163 0534 6FF01FF7 		j	.L47
 1164              	.L53:
 179:src/Riscv.cpp ****                     KSemaphore::semSignalHandler();
 1165              		.loc 1 179 17
 180:src/Riscv.cpp ****                     break;
 1166              		.loc 1 180 21
 180:src/Riscv.cpp ****                     break;
 1167              		.loc 1 180 49 is_stmt 0
 1168 0538 97000000 		call	_ZN10KSemaphore16semSignalHandlerEv@plt
 1168      E7800000 
 1169              	.LVL81:
 181:src/Riscv.cpp ****                 case KSemaphore::SEM_CLOSE:
 1170              		.loc 1 181 21 is_stmt 1
 1171 0540 6FF05FF6 		j	.L47
 1172              	.L55:
 182:src/Riscv.cpp ****                     KSemaphore::semCloseHandler();
 1173              		.loc 1 182 17
 183:src/Riscv.cpp ****                     break;
 1174              		.loc 1 183 21
 183:src/Riscv.cpp ****                     break;
 1175              		.loc 1 183 48 is_stmt 0
 1176 0544 97000000 		call	_ZN10KSemaphore15semCloseHandlerEv@plt
 1176      E7800000 
 1177              	.LVL82:
 184:src/Riscv.cpp ****                 case KConsole::CONSOLE_GETC:
 1178              		.loc 1 184 21 is_stmt 1
 1179 054c 6FF09FF5 		j	.L47
 1180              	.L51:
 185:src/Riscv.cpp ****                     KConsole::getcHandler();
 1181              		.loc 1 185 17
 186:src/Riscv.cpp ****                     break;
 1182              		.loc 1 186 21
 186:src/Riscv.cpp ****                     break;
 1183              		.loc 1 186 42 is_stmt 0
 1184 0550 97000000 		call	_ZN8KConsole11getcHandlerEv@plt
 1184      E7800000 
 1185              	.LVL83:
 187:src/Riscv.cpp ****                 case KConsole::CONSOLE_PUTC:
 1186              		.loc 1 187 21 is_stmt 1
GAS LISTING /tmp/cclE82Jg.s 			page 35


 1187 0558 6FF0DFF4 		j	.L47
 1188              	.L50:
 188:src/Riscv.cpp ****                     KConsole::putcHandler();
 1189              		.loc 1 188 17
 189:src/Riscv.cpp ****                     break;
 1190              		.loc 1 189 21
 189:src/Riscv.cpp ****                     break;
 1191              		.loc 1 189 42 is_stmt 0
 1192 055c 97000000 		call	_ZN8KConsole11putcHandlerEv@plt
 1192      E7800000 
 1193              	.LVL84:
 190:src/Riscv.cpp ****                 case KConsole::CONSOLE_GET_CHAR:
 1194              		.loc 1 190 21 is_stmt 1
 1195 0564 6FF01FF4 		j	.L47
 1196              	.L48:
 191:src/Riscv.cpp ****                     KConsole::getCharHandler();
 1197              		.loc 1 191 17
 192:src/Riscv.cpp ****                     break;
 1198              		.loc 1 192 21
 192:src/Riscv.cpp ****                     break;
 1199              		.loc 1 192 45 is_stmt 0
 1200 0568 97000000 		call	_ZN8KConsole14getCharHandlerEv@plt
 1200      E7800000 
 1201              	.LVL85:
 193:src/Riscv.cpp ****             }
 1202              		.loc 1 193 21 is_stmt 1
 1203 0570 6FF05FF3 		j	.L47
 1204              	.LBE84:
 1205              	.LBE88:
 1206              	.LBE90:
 1207              		.cfi_endproc
 1208              	.LFE32:
 1210              		.globl	_ZN5Riscv16kernelMainCalledE
 1211              		.globl	_ZN5Riscv12finishSystemE
 1212              		.globl	_ZN5Riscv9totalTimeE
 1213              		.bss
 1214              		.align	3
 1215              		.set	.LANCHOR0,. + 0
 1218              	_ZN5Riscv12finishSystemE:
 1219 0000 00       		.zero	1
 1222              	_ZN5Riscv16kernelMainCalledE:
 1223 0001 00       		.zero	1
 1224 0002 00000000 		.zero	6
 1224      0000
 1227              	_ZN5Riscv9totalTimeE:
 1228 0008 00000000 		.zero	8
 1228      00000000 
 1229              		.text
 1230              	.Letext0:
 1231              		.file 4 "src/../h/../lib/hw.h"
 1232              		.file 5 "src/../h/MemoryAllocator.hpp"
 1233              		.file 6 "src/../h/SleepPCBList.hpp"
 1234              		.file 7 "src/../h/KSemaphore.hpp"
 1235              		.file 8 "src/../h/KConsole.hpp"
 1236              		.file 9 "src/../h/Scheduler.hpp"
 1237              		.file 10 "src/../h/../test/userMain.hpp"
 1238              		.file 11 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/cclE82Jg.s 			page 36


GAS LISTING /tmp/cclE82Jg.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/cclE82Jg.s:9      .text:0000000000000000 _ZN5Riscv10initSystemEv
     /tmp/cclE82Jg.s:13     .text:0000000000000000 .L0 
     /tmp/cclE82Jg.s:14     .text:0000000000000000 .L0 
     /tmp/cclE82Jg.s:15     .text:0000000000000004 .L0 
     /tmp/cclE82Jg.s:18     .text:000000000000000c .L0 
     /tmp/cclE82Jg.s:19     .text:000000000000000c .L0 
     /tmp/cclE82Jg.s:21     .text:0000000000000010 .L0 
     /tmp/cclE82Jg.s:23     .text:0000000000000010 .L0 
     /tmp/cclE82Jg.s:24     .text:0000000000000010 .L0 
     /tmp/cclE82Jg.s:30     .text:0000000000000018 .L0 
  src/../h/Riscv.hpp:144    .text:0000000000000018 .L0 
     /tmp/cclE82Jg.s:40     .text:000000000000001c .L0 
     /tmp/cclE82Jg.s:41     .text:000000000000001c .L0 
     /tmp/cclE82Jg.s:44     .text:0000000000000024 .L0 
     /tmp/cclE82Jg.s:45     .text:0000000000000024 .L0 
     /tmp/cclE82Jg.s:48     .text:000000000000002c .L0 
     /tmp/cclE82Jg.s:49     .text:0000000000000030 .L0 
     /tmp/cclE82Jg.s:51     .text:0000000000000034 .L0 
     /tmp/cclE82Jg.s:52     .text:0000000000000034 .L0 
     /tmp/cclE82Jg.s:54     .text:0000000000000038 .L0 
     /tmp/cclE82Jg.s:56     .text:000000000000003c .L0 
     /tmp/cclE82Jg.s:62     .text:000000000000003c _ZN5Riscv16enableInterruptsEv
     /tmp/cclE82Jg.s:65     .text:000000000000003c .L0 
     /tmp/cclE82Jg.s:66     .text:000000000000003c .L0 
     /tmp/cclE82Jg.s:67     .text:0000000000000040 .L0 
     /tmp/cclE82Jg.s:69     .text:0000000000000044 .L0 
     /tmp/cclE82Jg.s:71     .text:0000000000000048 .L0 
     /tmp/cclE82Jg.s:76     .text:0000000000000048 .L0 
     /tmp/cclE82Jg.s:77     .text:0000000000000048 .L0 
     /tmp/cclE82Jg.s:78     .text:0000000000000048 .L0 
     /tmp/cclE82Jg.s:88     .text:0000000000000050 .L0 
     /tmp/cclE82Jg.s:89     .text:0000000000000054 .L0 
     /tmp/cclE82Jg.s:90     .text:0000000000000054 .L0 
     /tmp/cclE82Jg.s:92     .text:0000000000000058 .L0 
     /tmp/cclE82Jg.s:94     .text:000000000000005c .L0 
     /tmp/cclE82Jg.s:100    .text:000000000000005c _ZN5Riscv17disableInterruptsEv
     /tmp/cclE82Jg.s:103    .text:000000000000005c .L0 
     /tmp/cclE82Jg.s:104    .text:000000000000005c .L0 
     /tmp/cclE82Jg.s:105    .text:0000000000000060 .L0 
     /tmp/cclE82Jg.s:107    .text:0000000000000064 .L0 
     /tmp/cclE82Jg.s:109    .text:0000000000000068 .L0 
     /tmp/cclE82Jg.s:114    .text:0000000000000068 .L0 
     /tmp/cclE82Jg.s:115    .text:0000000000000068 .L0 
     /tmp/cclE82Jg.s:116    .text:0000000000000068 .L0 
     /tmp/cclE82Jg.s:126    .text:0000000000000070 .L0 
     /tmp/cclE82Jg.s:127    .text:0000000000000074 .L0 
     /tmp/cclE82Jg.s:128    .text:0000000000000074 .L0 
     /tmp/cclE82Jg.s:130    .text:0000000000000078 .L0 
     /tmp/cclE82Jg.s:132    .text:000000000000007c .L0 
     /tmp/cclE82Jg.s:138    .text:000000000000007c _ZN5Riscv9endSystemEv
     /tmp/cclE82Jg.s:141    .text:000000000000007c .L0 
     /tmp/cclE82Jg.s:142    .text:000000000000007c .L0 
     /tmp/cclE82Jg.s:143    .text:0000000000000080 .L0 
     /tmp/cclE82Jg.s:146    .text:0000000000000088 .L0 
     /tmp/cclE82Jg.s:147    .text:0000000000000088 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 38


     /tmp/cclE82Jg.s:149    .text:000000000000008c .L0 
     /tmp/cclE82Jg.s:151    .text:000000000000008c .L0 
     /tmp/cclE82Jg.s:152    .text:000000000000008c .L0 
     /tmp/cclE82Jg.s:155    .text:0000000000000094 .L0 
     /tmp/cclE82Jg.s:156    .text:0000000000000094 .L0 
     /tmp/cclE82Jg.s:161    .text:00000000000000a0 .L0 
     /tmp/cclE82Jg.s:162    .text:00000000000000a0 .L0 
     /tmp/cclE82Jg.s:163    .text:00000000000000a0 .L0 
     /tmp/cclE82Jg.s:164    .text:00000000000000a0 .L0 
     /tmp/cclE82Jg.s:167    .text:00000000000000a8 .L0 
     /tmp/cclE82Jg.s:169    .text:00000000000000ac .L0 
     /tmp/cclE82Jg.s:170    .text:00000000000000ac .L0 
     /tmp/cclE82Jg.s:176    .text:00000000000000c0 .L0 
     /tmp/cclE82Jg.s:177    .text:00000000000000c0 .L0 
     /tmp/cclE82Jg.s:180    .text:00000000000000cc .L0 
     /tmp/cclE82Jg.s:181    .text:00000000000000cc .L0 
     /tmp/cclE82Jg.s:185    .text:00000000000000d4 .L0 
     /tmp/cclE82Jg.s:186    .text:00000000000000d4 .L0 
     /tmp/cclE82Jg.s:187    .text:00000000000000d4 .L0 
     /tmp/cclE82Jg.s:192    .text:00000000000000e8 .L0 
     /tmp/cclE82Jg.s:194    .text:00000000000000ec .L0 
     /tmp/cclE82Jg.s:195    .text:00000000000000ec .L0 
     /tmp/cclE82Jg.s:198    .text:00000000000000f4 .L0 
     /tmp/cclE82Jg.s:201    .text:00000000000000f8 .L0 
     /tmp/cclE82Jg.s:202    .text:00000000000000f8 .L0 
     /tmp/cclE82Jg.s:205    .text:0000000000000100 .L0 
     /tmp/cclE82Jg.s:206    .text:0000000000000104 .L0 
     /tmp/cclE82Jg.s:208    .text:0000000000000108 .L0 
     /tmp/cclE82Jg.s:209    .text:0000000000000108 .L0 
     /tmp/cclE82Jg.s:211    .text:000000000000010c .L0 
     /tmp/cclE82Jg.s:213    .text:0000000000000110 .L0 
     /tmp/cclE82Jg.s:219    .text:0000000000000110 _ZN5Riscv10popSppSpieEv
     /tmp/cclE82Jg.s:222    .text:0000000000000110 .L0 
     /tmp/cclE82Jg.s:223    .text:0000000000000110 .L0 
     /tmp/cclE82Jg.s:224    .text:0000000000000114 .L0 
     /tmp/cclE82Jg.s:226    .text:0000000000000118 .L0 
     /tmp/cclE82Jg.s:228    .text:000000000000011c .L0 
     /tmp/cclE82Jg.s:230    .text:000000000000011c .L0 
       src/Riscv.cpp:55     .text:000000000000011c .L0 
     /tmp/cclE82Jg.s:236    .text:0000000000000120 .L0 
       src/Riscv.cpp:56     .text:0000000000000120 .L0 
     /tmp/cclE82Jg.s:242    .text:0000000000000124 .L0 
     /tmp/cclE82Jg.s:243    .text:0000000000000128 .L0 
     /tmp/cclE82Jg.s:244    .text:0000000000000128 .L0 
     /tmp/cclE82Jg.s:246    .text:000000000000012c .L0 
     /tmp/cclE82Jg.s:248    .text:0000000000000130 .L0 
     /tmp/cclE82Jg.s:254    .text:0000000000000130 _ZN5Riscv10kernelMainEv
     /tmp/cclE82Jg.s:257    .text:0000000000000130 .L0 
     /tmp/cclE82Jg.s:258    .text:0000000000000130 .L0 
     /tmp/cclE82Jg.s:259    .text:0000000000000130 .L0 
     /tmp/cclE82Jg.s:264    .text:0000000000000140 .L0 
     /tmp/cclE82Jg.s:265    .text:0000000000000144 .L0 
     /tmp/cclE82Jg.s:268    .text:000000000000014c .L0 
     /tmp/cclE82Jg.s:269    .text:000000000000014c .L0 
     /tmp/cclE82Jg.s:271    .text:0000000000000150 .L0 
     /tmp/cclE82Jg.s:273    .text:0000000000000150 .L0 
     /tmp/cclE82Jg.s:274    .text:0000000000000150 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 39


     /tmp/cclE82Jg.s:277    .text:000000000000015c .L0 
     /tmp/cclE82Jg.s:278    .text:000000000000015c .L0 
     /tmp/cclE82Jg.s:281    .text:0000000000000164 .L0 
     /tmp/cclE82Jg.s:282    .text:0000000000000164 .L0 
     /tmp/cclE82Jg.s:286    .text:000000000000016c .L0 
     /tmp/cclE82Jg.s:287    .text:000000000000016c .L0 
     /tmp/cclE82Jg.s:288    .text:000000000000016c .L0 
     /tmp/cclE82Jg.s:293    .text:0000000000000180 .L0 
     /tmp/cclE82Jg.s:295    .text:0000000000000184 .L0 
     /tmp/cclE82Jg.s:296    .text:0000000000000184 .L0 
     /tmp/cclE82Jg.s:299    .text:000000000000018c .L0 
     /tmp/cclE82Jg.s:302    .text:0000000000000190 .L0 
     /tmp/cclE82Jg.s:303    .text:0000000000000190 .L0 
     /tmp/cclE82Jg.s:306    .text:0000000000000198 .L0 
     /tmp/cclE82Jg.s:307    .text:000000000000019c .L0 
     /tmp/cclE82Jg.s:309    .text:00000000000001a0 .L0 
     /tmp/cclE82Jg.s:310    .text:00000000000001a0 .L0 
     /tmp/cclE82Jg.s:312    .text:00000000000001a4 .L0 
     /tmp/cclE82Jg.s:314    .text:00000000000001a8 .L0 
     /tmp/cclE82Jg.s:320    .text:00000000000001a8 _ZN5Riscv15userMainWrapperEPv
     /tmp/cclE82Jg.s:323    .text:00000000000001a8 .L0 
     /tmp/cclE82Jg.s:324    .text:00000000000001a8 .L0 
     /tmp/cclE82Jg.s:325    .text:00000000000001ac .L0 
     /tmp/cclE82Jg.s:328    .text:00000000000001b4 .L0 
     /tmp/cclE82Jg.s:329    .text:00000000000001b4 .L0 
     /tmp/cclE82Jg.s:331    .text:00000000000001b8 .L0 
     /tmp/cclE82Jg.s:333    .text:00000000000001b8 .L0 
     /tmp/cclE82Jg.s:334    .text:00000000000001b8 .L0 
     /tmp/cclE82Jg.s:337    .text:00000000000001c0 .L0 
     /tmp/cclE82Jg.s:338    .text:00000000000001c4 .L0 
     /tmp/cclE82Jg.s:340    .text:00000000000001c8 .L0 
     /tmp/cclE82Jg.s:341    .text:00000000000001c8 .L0 
     /tmp/cclE82Jg.s:343    .text:00000000000001cc .L0 
     /tmp/cclE82Jg.s:345    .text:00000000000001d0 .L0 
     /tmp/cclE82Jg.s:351    .text:00000000000001d0 _ZN5Riscv22disableTimerInterruptsEv
     /tmp/cclE82Jg.s:354    .text:00000000000001d0 .L0 
     /tmp/cclE82Jg.s:355    .text:00000000000001d0 .L0 
     /tmp/cclE82Jg.s:356    .text:00000000000001d4 .L0 
     /tmp/cclE82Jg.s:358    .text:00000000000001d8 .L0 
     /tmp/cclE82Jg.s:360    .text:00000000000001dc .L0 
     /tmp/cclE82Jg.s:363    .text:00000000000001dc .L0 
     /tmp/cclE82Jg.s:364    .text:00000000000001dc .L0 
     /tmp/cclE82Jg.s:365    .text:00000000000001dc .L0 
     /tmp/cclE82Jg.s:372    .text:00000000000001e4 .L0 
     /tmp/cclE82Jg.s:373    .text:00000000000001e8 .L0 
     /tmp/cclE82Jg.s:374    .text:00000000000001e8 .L0 
     /tmp/cclE82Jg.s:376    .text:00000000000001ec .L0 
     /tmp/cclE82Jg.s:378    .text:00000000000001f0 .L0 
     /tmp/cclE82Jg.s:384    .text:00000000000001f0 _ZN5Riscv9idleRiscvEPv
     /tmp/cclE82Jg.s:387    .text:00000000000001f0 .L0 
     /tmp/cclE82Jg.s:389    .text:00000000000001f0 .L0 
     /tmp/cclE82Jg.s:390    .text:00000000000001f4 .L0 
     /tmp/cclE82Jg.s:392    .text:00000000000001f8 .L0 
     /tmp/cclE82Jg.s:394    .text:00000000000001fc .L0 
     /tmp/cclE82Jg.s:397    .text:00000000000001fc .L0 
     /tmp/cclE82Jg.s:398    .text:00000000000001fc .L0 
     /tmp/cclE82Jg.s:399    .text:0000000000000200 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 40


     /tmp/cclE82Jg.s:405    .text:0000000000000200 _ZN5Riscv13w_a0_sscratchEv
     /tmp/cclE82Jg.s:408    .text:0000000000000200 .L0 
     /tmp/cclE82Jg.s:409    .text:0000000000000200 .L0 
     /tmp/cclE82Jg.s:410    .text:0000000000000204 .L0 
     /tmp/cclE82Jg.s:412    .text:0000000000000208 .L0 
     /tmp/cclE82Jg.s:414    .text:000000000000020c .L0 
     /tmp/cclE82Jg.s:416    .text:000000000000020c .L0 
     /tmp/cclE82Jg.s:417    .text:000000000000020c .L0 
       src/Riscv.cpp:245    .text:000000000000020c .L0 
     /tmp/cclE82Jg.s:424    .text:0000000000000210 .L0 
     /tmp/cclE82Jg.s:426    .text:0000000000000210 .L0 
       src/Riscv.cpp:246    .text:0000000000000220 .L0 
     /tmp/cclE82Jg.s:435    .text:0000000000000224 .L0 
       src/Riscv.cpp:247    .text:0000000000000224 .L0 
     /tmp/cclE82Jg.s:440    .text:0000000000000228 .L0 
       src/Riscv.cpp:248    .text:0000000000000228 .L0 
     /tmp/cclE82Jg.s:446    .text:000000000000022c .L0 
     /tmp/cclE82Jg.s:447    .text:0000000000000230 .L0 
     /tmp/cclE82Jg.s:448    .text:0000000000000230 .L0 
     /tmp/cclE82Jg.s:450    .text:0000000000000234 .L0 
     /tmp/cclE82Jg.s:452    .text:0000000000000238 .L0 
     /tmp/cclE82Jg.s:458    .text:0000000000000238 _ZN5Riscv14changePrivModeEv
     /tmp/cclE82Jg.s:461    .text:0000000000000238 .L0 
     /tmp/cclE82Jg.s:462    .text:0000000000000238 .L0 
     /tmp/cclE82Jg.s:463    .text:000000000000023c .L0 
     /tmp/cclE82Jg.s:465    .text:0000000000000240 .L0 
     /tmp/cclE82Jg.s:467    .text:0000000000000244 .L0 
     /tmp/cclE82Jg.s:469    .text:0000000000000244 .L0 
     /tmp/cclE82Jg.s:470    .text:0000000000000244 .L0 
     /tmp/cclE82Jg.s:474    .text:0000000000000254 .L0 
     /tmp/cclE82Jg.s:479    .text:0000000000000258 .L0 
     /tmp/cclE82Jg.s:480    .text:0000000000000258 .L0 
     /tmp/cclE82Jg.s:481    .text:0000000000000258 .L0 
     /tmp/cclE82Jg.s:492    .text:0000000000000260 .L0 
     /tmp/cclE82Jg.s:493    .text:0000000000000264 .L0 
     /tmp/cclE82Jg.s:494    .text:0000000000000264 .L0 
     /tmp/cclE82Jg.s:495    .text:0000000000000264 .L0 
     /tmp/cclE82Jg.s:497    .text:0000000000000268 .L0 
     /tmp/cclE82Jg.s:500    .text:000000000000026c .L0 
     /tmp/cclE82Jg.s:505    .text:000000000000026c .L0 
     /tmp/cclE82Jg.s:506    .text:000000000000026c .L0 
     /tmp/cclE82Jg.s:507    .text:000000000000026c .L0 
     /tmp/cclE82Jg.s:517    .text:0000000000000274 .L0 
     /tmp/cclE82Jg.s:518    .text:0000000000000278 .L0 
     /tmp/cclE82Jg.s:524    .text:0000000000000278 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/cclE82Jg.s:527    .text:0000000000000278 .L0 
     /tmp/cclE82Jg.s:528    .text:0000000000000278 .L0 
     /tmp/cclE82Jg.s:529    .text:000000000000027c .L0 
     /tmp/cclE82Jg.s:533    .text:0000000000000288 .L0 
     /tmp/cclE82Jg.s:534    .text:0000000000000288 .L0 
     /tmp/cclE82Jg.s:535    .text:0000000000000288 .L0 
     /tmp/cclE82Jg.s:537    .text:000000000000028c .L0 
     /tmp/cclE82Jg.s:539    .text:000000000000028c .L0 
       src/Riscv.cpp:61     .text:000000000000028c .L0 
     /tmp/cclE82Jg.s:548    .text:000000000000029c .L0 
     /tmp/cclE82Jg.s:549    .text:000000000000029c .L0 
       src/Riscv.cpp:62     .text:00000000000002a8 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 41


     /tmp/cclE82Jg.s:561    .text:00000000000002b0 .L0 
     /tmp/cclE82Jg.s:562    .text:00000000000002b0 .L0 
     /tmp/cclE82Jg.s:563    .text:00000000000002b0 .L0 
  src/../h/Riscv.hpp:119    .text:00000000000002b0 .L0 
     /tmp/cclE82Jg.s:571    .text:00000000000002b8 .L0 
     /tmp/cclE82Jg.s:572    .text:00000000000002b8 .L0 
     /tmp/cclE82Jg.s:578    .text:00000000000002bc .L0 
     /tmp/cclE82Jg.s:588    .text:00000000000002dc .L0 
     /tmp/cclE82Jg.s:589    .text:00000000000002dc .L0 
     /tmp/cclE82Jg.s:590    .text:00000000000002dc .L0 
     /tmp/cclE82Jg.s:591    .text:00000000000002dc .L0 
     /tmp/cclE82Jg.s:594    .text:00000000000002e4 .L0 
     /tmp/cclE82Jg.s:599    .text:00000000000002e8 .L0 
     /tmp/cclE82Jg.s:603    .text:00000000000002f0 .L0 
     /tmp/cclE82Jg.s:604    .text:00000000000002f0 .L0 
     /tmp/cclE82Jg.s:605    .text:00000000000002f0 .L0 
     /tmp/cclE82Jg.s:606    .text:00000000000002f0 .L0 
     /tmp/cclE82Jg.s:609    .text:00000000000002f8 .L0 
     /tmp/cclE82Jg.s:614    .text:00000000000002fc .L0 
     /tmp/cclE82Jg.s:624    .text:000000000000031c .L0 
     /tmp/cclE82Jg.s:626    .text:000000000000031c .L0 
     /tmp/cclE82Jg.s:627    .text:000000000000031c .L0 
     /tmp/cclE82Jg.s:628    .text:000000000000031c .L0 
     /tmp/cclE82Jg.s:633    .text:0000000000000328 .L0 
       src/Riscv.cpp:94     .text:0000000000000328 .L0 
     /tmp/cclE82Jg.s:639    .text:000000000000032c .L0 
       src/Riscv.cpp:95     .text:000000000000032c .L0 
     /tmp/cclE82Jg.s:644    .text:0000000000000330 .L0 
     /tmp/cclE82Jg.s:645    .text:0000000000000330 .L0 
       src/Riscv.cpp:97     .text:0000000000000330 .L0 
     /tmp/cclE82Jg.s:653    .text:0000000000000334 .L0 
     /tmp/cclE82Jg.s:654    .text:0000000000000334 .L0 
     /tmp/cclE82Jg.s:657    .text:0000000000000338 .L0 
     /tmp/cclE82Jg.s:660    .text:000000000000033c .L0 
     /tmp/cclE82Jg.s:661    .text:000000000000033c .L0 
     /tmp/cclE82Jg.s:665    .text:0000000000000348 .L0 
       src/Riscv.cpp:101    .text:0000000000000348 .L0 
     /tmp/cclE82Jg.s:671    .text:000000000000034c .L0 
       src/Riscv.cpp:102    .text:000000000000034c .L0 
     /tmp/cclE82Jg.s:676    .text:0000000000000350 .L0 
     /tmp/cclE82Jg.s:677    .text:0000000000000350 .L0 
       src/Riscv.cpp:104    .text:0000000000000350 .L0 
     /tmp/cclE82Jg.s:685    .text:0000000000000358 .L0 
     /tmp/cclE82Jg.s:686    .text:0000000000000358 .L0 
     /tmp/cclE82Jg.s:690    .text:0000000000000364 .L0 
     /tmp/cclE82Jg.s:696    .text:0000000000000368 .L0 
     /tmp/cclE82Jg.s:697    .text:0000000000000368 .L0 
     /tmp/cclE82Jg.s:702    .text:0000000000000378 .L0 
     /tmp/cclE82Jg.s:707    .text:000000000000037c .L0 
     /tmp/cclE82Jg.s:709    .text:000000000000037c .L0 
     /tmp/cclE82Jg.s:712    .text:000000000000037c .L0 
     /tmp/cclE82Jg.s:713    .text:000000000000037c .L0 
     /tmp/cclE82Jg.s:714    .text:000000000000037c .L0 
  src/../h/Riscv.hpp:129    .text:000000000000037c .L0 
     /tmp/cclE82Jg.s:723    .text:0000000000000384 .L0 
     /tmp/cclE82Jg.s:724    .text:0000000000000384 .L0 
     /tmp/cclE82Jg.s:728    .text:0000000000000388 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 42


     /tmp/cclE82Jg.s:732    .text:000000000000038c .L0 
     /tmp/cclE82Jg.s:733    .text:000000000000038c .L0 
     /tmp/cclE82Jg.s:734    .text:000000000000038c .L0 
  src/../h/Riscv.hpp:202    .text:000000000000038c .L0 
     /tmp/cclE82Jg.s:742    .text:0000000000000394 .L0 
     /tmp/cclE82Jg.s:743    .text:0000000000000394 .L0 
     /tmp/cclE82Jg.s:747    .text:0000000000000398 .L0 
     /tmp/cclE82Jg.s:752    .text:000000000000039c .L0 
     /tmp/cclE82Jg.s:753    .text:000000000000039c .L0 
     /tmp/cclE82Jg.s:754    .text:000000000000039c .L0 
     /tmp/cclE82Jg.s:764    .text:00000000000003a4 .L0 
     /tmp/cclE82Jg.s:765    .text:00000000000003a4 .L0 
     /tmp/cclE82Jg.s:770    .text:00000000000003b8 .L0 
     /tmp/cclE82Jg.s:771    .text:00000000000003b8 .L0 
     /tmp/cclE82Jg.s:776    .text:00000000000003cc .L0 
     /tmp/cclE82Jg.s:777    .text:00000000000003cc .L0 
     /tmp/cclE82Jg.s:780    .text:00000000000003d4 .L0 
     /tmp/cclE82Jg.s:781    .text:00000000000003d4 .L0 
     /tmp/cclE82Jg.s:788    .text:00000000000003e0 .L0 
     /tmp/cclE82Jg.s:789    .text:00000000000003e0 .L0 
     /tmp/cclE82Jg.s:794    .text:00000000000003e4 .L0 
     /tmp/cclE82Jg.s:796    .text:00000000000003e8 .L0 
     /tmp/cclE82Jg.s:799    .text:00000000000003ec .L0 
     /tmp/cclE82Jg.s:800    .text:00000000000003ec .L0 
     /tmp/cclE82Jg.s:805    .text:00000000000003f0 .L0 
  src/../h/Riscv.hpp:207    .text:00000000000003f0 .L0 
     /tmp/cclE82Jg.s:815    .text:00000000000003f4 .L0 
     /tmp/cclE82Jg.s:816    .text:00000000000003f4 .L0 
     /tmp/cclE82Jg.s:821    .text:00000000000003f8 .L0 
  src/../h/Riscv.hpp:134    .text:00000000000003f8 .L0 
     /tmp/cclE82Jg.s:831    .text:00000000000003fc .L0 
     /tmp/cclE82Jg.s:832    .text:00000000000003fc .L0 
     /tmp/cclE82Jg.s:839    .text:0000000000000404 .L0 
     /tmp/cclE82Jg.s:840    .text:0000000000000404 .L0 
     /tmp/cclE82Jg.s:841    .text:0000000000000408 .L0 
     /tmp/cclE82Jg.s:842    .text:0000000000000408 .L0 
     /tmp/cclE82Jg.s:844    .text:000000000000040c .L0 
     /tmp/cclE82Jg.s:845    .text:000000000000040c .L0 
     /tmp/cclE82Jg.s:847    .text:0000000000000410 .L0 
     /tmp/cclE82Jg.s:849    .text:0000000000000414 .L0 
     /tmp/cclE82Jg.s:852    .text:0000000000000418 .L0 
     /tmp/cclE82Jg.s:857    .text:0000000000000418 .L0 
     /tmp/cclE82Jg.s:858    .text:0000000000000418 .L0 
     /tmp/cclE82Jg.s:860    .text:000000000000041c .L0 
     /tmp/cclE82Jg.s:861    .text:000000000000041c .L0 
     /tmp/cclE82Jg.s:871    .text:0000000000000428 .L0 
     /tmp/cclE82Jg.s:872    .text:0000000000000428 .L0 
     /tmp/cclE82Jg.s:876    .text:0000000000000438 .L0 
     /tmp/cclE82Jg.s:877    .text:0000000000000438 .L0 
     /tmp/cclE82Jg.s:886    .text:0000000000000444 .L0 
     /tmp/cclE82Jg.s:887    .text:0000000000000444 .L0 
     /tmp/cclE82Jg.s:888    .text:0000000000000444 .L0 
     /tmp/cclE82Jg.s:889    .text:0000000000000444 .L0 
     /tmp/cclE82Jg.s:892    .text:000000000000044c .L0 
     /tmp/cclE82Jg.s:896    .text:0000000000000450 .L0 
     /tmp/cclE82Jg.s:897    .text:0000000000000450 .L0 
     /tmp/cclE82Jg.s:899    .text:0000000000000450 .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 43


     /tmp/cclE82Jg.s:900    .text:0000000000000450 .L0 
     /tmp/cclE82Jg.s:901    .text:0000000000000450 .L0 
       src/Riscv.cpp:139    .text:0000000000000450 .L0 
     /tmp/cclE82Jg.s:911    .text:0000000000000454 .L0 
     /tmp/cclE82Jg.s:912    .text:0000000000000454 .L0 
     /tmp/cclE82Jg.s:913    .text:0000000000000454 .L0 
  src/../h/Riscv.hpp:129    .text:0000000000000454 .L0 
     /tmp/cclE82Jg.s:921    .text:000000000000045c .L0 
     /tmp/cclE82Jg.s:922    .text:000000000000045c .L0 
     /tmp/cclE82Jg.s:926    .text:0000000000000460 .L0 
     /tmp/cclE82Jg.s:928    .text:0000000000000464 .L0 
     /tmp/cclE82Jg.s:932    .text:0000000000000468 .L0 
     /tmp/cclE82Jg.s:933    .text:0000000000000468 .L0 
     /tmp/cclE82Jg.s:934    .text:0000000000000468 .L0 
  src/../h/Riscv.hpp:202    .text:0000000000000468 .L0 
     /tmp/cclE82Jg.s:942    .text:0000000000000470 .L0 
     /tmp/cclE82Jg.s:943    .text:0000000000000470 .L0 
     /tmp/cclE82Jg.s:947    .text:0000000000000474 .L0 
     /tmp/cclE82Jg.s:949    .text:0000000000000478 .L0 
     /tmp/cclE82Jg.s:1033   .text:000000000000049c .L0 
     /tmp/cclE82Jg.s:1034   .text:000000000000049c .L0 
     /tmp/cclE82Jg.s:1035   .text:000000000000049c .L0 
     /tmp/cclE82Jg.s:1039   .text:00000000000004a4 .L0 
     /tmp/cclE82Jg.s:1040   .text:00000000000004a4 .L0 
     /tmp/cclE82Jg.s:1041   .text:00000000000004a4 .L0 
     /tmp/cclE82Jg.s:1046   .text:00000000000004a8 .L0 
  src/../h/Riscv.hpp:207    .text:00000000000004a8 .L0 
     /tmp/cclE82Jg.s:1056   .text:00000000000004ac .L0 
     /tmp/cclE82Jg.s:1057   .text:00000000000004ac .L0 
     /tmp/cclE82Jg.s:1062   .text:00000000000004b0 .L0 
  src/../h/Riscv.hpp:134    .text:00000000000004b0 .L0 
     /tmp/cclE82Jg.s:1072   .text:00000000000004b4 .L0 
     /tmp/cclE82Jg.s:1073   .text:00000000000004b4 .L0 
     /tmp/cclE82Jg.s:1079   .text:00000000000004bc .L0 
     /tmp/cclE82Jg.s:1080   .text:00000000000004bc .L0 
     /tmp/cclE82Jg.s:1086   .text:00000000000004c0 .L0 
     /tmp/cclE82Jg.s:1087   .text:00000000000004c0 .L0 
     /tmp/cclE82Jg.s:1088   .text:00000000000004c0 .L0 
     /tmp/cclE82Jg.s:1091   .text:00000000000004c8 .L0 
     /tmp/cclE82Jg.s:1094   .text:00000000000004cc .L0 
     /tmp/cclE82Jg.s:1095   .text:00000000000004cc .L0 
     /tmp/cclE82Jg.s:1096   .text:00000000000004cc .L0 
     /tmp/cclE82Jg.s:1099   .text:00000000000004d4 .L0 
     /tmp/cclE82Jg.s:1102   .text:00000000000004d8 .L0 
     /tmp/cclE82Jg.s:1103   .text:00000000000004d8 .L0 
     /tmp/cclE82Jg.s:1104   .text:00000000000004d8 .L0 
     /tmp/cclE82Jg.s:1107   .text:00000000000004e0 .L0 
     /tmp/cclE82Jg.s:1110   .text:00000000000004e4 .L0 
     /tmp/cclE82Jg.s:1111   .text:00000000000004e4 .L0 
     /tmp/cclE82Jg.s:1112   .text:00000000000004e4 .L0 
     /tmp/cclE82Jg.s:1115   .text:00000000000004ec .L0 
     /tmp/cclE82Jg.s:1118   .text:00000000000004f0 .L0 
     /tmp/cclE82Jg.s:1119   .text:00000000000004f0 .L0 
     /tmp/cclE82Jg.s:1120   .text:00000000000004f0 .L0 
     /tmp/cclE82Jg.s:1123   .text:00000000000004f8 .L0 
     /tmp/cclE82Jg.s:1126   .text:00000000000004fc .L0 
     /tmp/cclE82Jg.s:1127   .text:00000000000004fc .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 44


     /tmp/cclE82Jg.s:1128   .text:00000000000004fc .L0 
     /tmp/cclE82Jg.s:1131   .text:0000000000000504 .L0 
     /tmp/cclE82Jg.s:1134   .text:0000000000000508 .L0 
     /tmp/cclE82Jg.s:1135   .text:0000000000000508 .L0 
     /tmp/cclE82Jg.s:1136   .text:0000000000000508 .L0 
     /tmp/cclE82Jg.s:1139   .text:0000000000000510 .L0 
     /tmp/cclE82Jg.s:1142   .text:0000000000000514 .L0 
     /tmp/cclE82Jg.s:1143   .text:0000000000000514 .L0 
     /tmp/cclE82Jg.s:1144   .text:0000000000000514 .L0 
     /tmp/cclE82Jg.s:1147   .text:000000000000051c .L0 
     /tmp/cclE82Jg.s:1150   .text:0000000000000520 .L0 
     /tmp/cclE82Jg.s:1151   .text:0000000000000520 .L0 
     /tmp/cclE82Jg.s:1152   .text:0000000000000520 .L0 
     /tmp/cclE82Jg.s:1155   .text:0000000000000528 .L0 
     /tmp/cclE82Jg.s:1158   .text:000000000000052c .L0 
     /tmp/cclE82Jg.s:1159   .text:000000000000052c .L0 
     /tmp/cclE82Jg.s:1160   .text:000000000000052c .L0 
     /tmp/cclE82Jg.s:1163   .text:0000000000000534 .L0 
     /tmp/cclE82Jg.s:1166   .text:0000000000000538 .L0 
     /tmp/cclE82Jg.s:1167   .text:0000000000000538 .L0 
     /tmp/cclE82Jg.s:1168   .text:0000000000000538 .L0 
     /tmp/cclE82Jg.s:1171   .text:0000000000000540 .L0 
     /tmp/cclE82Jg.s:1174   .text:0000000000000544 .L0 
     /tmp/cclE82Jg.s:1175   .text:0000000000000544 .L0 
     /tmp/cclE82Jg.s:1176   .text:0000000000000544 .L0 
     /tmp/cclE82Jg.s:1179   .text:000000000000054c .L0 
     /tmp/cclE82Jg.s:1182   .text:0000000000000550 .L0 
     /tmp/cclE82Jg.s:1183   .text:0000000000000550 .L0 
     /tmp/cclE82Jg.s:1184   .text:0000000000000550 .L0 
     /tmp/cclE82Jg.s:1187   .text:0000000000000558 .L0 
     /tmp/cclE82Jg.s:1190   .text:000000000000055c .L0 
     /tmp/cclE82Jg.s:1191   .text:000000000000055c .L0 
     /tmp/cclE82Jg.s:1192   .text:000000000000055c .L0 
     /tmp/cclE82Jg.s:1195   .text:0000000000000564 .L0 
     /tmp/cclE82Jg.s:1198   .text:0000000000000568 .L0 
     /tmp/cclE82Jg.s:1199   .text:0000000000000568 .L0 
     /tmp/cclE82Jg.s:1200   .text:0000000000000568 .L0 
     /tmp/cclE82Jg.s:1203   .text:0000000000000570 .L0 
     /tmp/cclE82Jg.s:1207   .text:0000000000000574 .L0 
     /tmp/cclE82Jg.s:1222   .bss:0000000000000001 _ZN5Riscv16kernelMainCalledE
     /tmp/cclE82Jg.s:1218   .bss:0000000000000000 _ZN5Riscv12finishSystemE
     /tmp/cclE82Jg.s:1227   .bss:0000000000000008 _ZN5Riscv9totalTimeE
     /tmp/cclE82Jg.s:1215   .bss:0000000000000000 .LANCHOR0
     /tmp/cclE82Jg.s:1239   .text:0000000000000574 .L0 
     /tmp/cclE82Jg.s:24     .text:0000000000000010 .L0 
     /tmp/cclE82Jg.s:157    .text:0000000000000098 .L0 
     /tmp/cclE82Jg.s:170    .text:00000000000000ac .L0 
     /tmp/cclE82Jg.s:177    .text:00000000000000c0 .L0 
     /tmp/cclE82Jg.s:187    .text:00000000000000d4 .L0 
     /tmp/cclE82Jg.s:259    .text:0000000000000130 .L0 
     /tmp/cclE82Jg.s:275    .text:0000000000000154 .L0 
     /tmp/cclE82Jg.s:288    .text:000000000000016c .L0 
     /tmp/cclE82Jg.s:426    .text:0000000000000210 .L0 
     /tmp/cclE82Jg.s:470    .text:0000000000000244 .L0 
     /tmp/cclE82Jg.s:545    .text:0000000000000290 .L0 
     /tmp/cclE82Jg.s:549    .text:000000000000029c .L0 
     /tmp/cclE82Jg.s:628    .text:000000000000031c .L0 
GAS LISTING /tmp/cclE82Jg.s 			page 45


     /tmp/cclE82Jg.s:661    .text:000000000000033c .L0 
     /tmp/cclE82Jg.s:686    .text:0000000000000358 .L0 
     /tmp/cclE82Jg.s:765    .text:00000000000003a4 .L0 
     /tmp/cclE82Jg.s:771    .text:00000000000003b8 .L0 
     /tmp/cclE82Jg.s:781    .text:00000000000003d4 .L0 
     /tmp/cclE82Jg.s:873    .text:000000000000042c .L0 
     /tmp/cclE82Jg.s:961    .rodata:0000000000000000 .L49
     /tmp/cclE82Jg.s:953    .text:0000000000000484 .L0 
     /tmp/cclE82Jg.s:160    .text:00000000000000a0 .L8
     /tmp/cclE82Jg.s:199    .text:00000000000000f8 .L9
     /tmp/cclE82Jg.s:183    .text:00000000000000d4 .L10
     /tmp/cclE82Jg.s:262    .text:0000000000000140 .L22
     /tmp/cclE82Jg.s:300    .text:0000000000000190 .L16
     /tmp/cclE82Jg.s:284    .text:000000000000016c .L17
     /tmp/cclE82Jg.s:395    .text:00000000000001fc .L28
     /tmp/cclE82Jg.s:499    .text:000000000000026c .L33
     /tmp/cclE82Jg.s:488    .text:0000000000000260 .L32
     /tmp/cclE82Jg.s:611    .text:00000000000002fc .L37
     /tmp/cclE82Jg.s:894    .text:0000000000000450 .L38
     /tmp/cclE82Jg.s:881    .text:0000000000000444 .L39
     /tmp/cclE82Jg.s:596    .text:00000000000002e8 .L66
     /tmp/cclE82Jg.s:835    .text:0000000000000404 .L36
     /tmp/cclE82Jg.s:704    .text:000000000000037c .L43
     /tmp/cclE82Jg.s:692    .text:0000000000000368 .L46
     /tmp/cclE82Jg.s:865    .text:0000000000000428 .L67
     /tmp/cclE82Jg.s:851    .text:0000000000000418 .L68
     /tmp/cclE82Jg.s:797    .text:00000000000003ec .L45
     /tmp/cclE82Jg.s:1038   .text:00000000000004a4 .L47
     /tmp/cclE82Jg.s:1031   .text:000000000000049c .L64
     /tmp/cclE82Jg.s:1081   .text:00000000000004c0 .L63
     /tmp/cclE82Jg.s:1100   .text:00000000000004d8 .L62
     /tmp/cclE82Jg.s:1124   .text:00000000000004fc .L61
     /tmp/cclE82Jg.s:1116   .text:00000000000004f0 .L60
     /tmp/cclE82Jg.s:1092   .text:00000000000004cc .L59
     /tmp/cclE82Jg.s:1108   .text:00000000000004e4 .L58
     /tmp/cclE82Jg.s:1140   .text:0000000000000514 .L57
     /tmp/cclE82Jg.s:1148   .text:0000000000000520 .L56
     /tmp/cclE82Jg.s:1172   .text:0000000000000544 .L55
     /tmp/cclE82Jg.s:1156   .text:000000000000052c .L54
     /tmp/cclE82Jg.s:1164   .text:0000000000000538 .L53
     /tmp/cclE82Jg.s:1132   .text:0000000000000508 .L52
     /tmp/cclE82Jg.s:1180   .text:0000000000000550 .L51
     /tmp/cclE82Jg.s:1188   .text:000000000000055c .L50
     /tmp/cclE82Jg.s:1196   .text:0000000000000568 .L48
     /tmp/cclE82Jg.s:3754   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cclE82Jg.s:5451   .debug_str:0000000000001115 .LASF329
     /tmp/cclE82Jg.s:5059   .debug_str:00000000000003e3 .LASF330
     /tmp/cclE82Jg.s:5145   .debug_str:00000000000006c9 .LASF331
     /tmp/cclE82Jg.s:5      .text:0000000000000000 .Ltext0
     /tmp/cclE82Jg.s:1230   .text:0000000000000574 .Letext0
     /tmp/cclE82Jg.s:4953   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cclE82Jg.s:5179   .debug_str:0000000000000809 .LASF0
     /tmp/cclE82Jg.s:5219   .debug_str:000000000000094b .LASF1
     /tmp/cclE82Jg.s:5385   .debug_str:0000000000000ee5 .LASF2
     /tmp/cclE82Jg.s:5401   .debug_str:0000000000000f73 .LASF4
     /tmp/cclE82Jg.s:5199   .debug_str:00000000000008b1 .LASF3
     /tmp/cclE82Jg.s:4981   .debug_str:0000000000000109 .LASF5
GAS LISTING /tmp/cclE82Jg.s 			page 46


     /tmp/cclE82Jg.s:5341   .debug_str:0000000000000dca .LASF6
     /tmp/cclE82Jg.s:5327   .debug_str:0000000000000d5e .LASF7
     /tmp/cclE82Jg.s:5209   .debug_str:0000000000000904 .LASF8
     /tmp/cclE82Jg.s:5141   .debug_str:00000000000006a2 .LASF9
     /tmp/cclE82Jg.s:5153   .debug_str:000000000000071f .LASF10
     /tmp/cclE82Jg.s:5045   .debug_str:0000000000000380 .LASF11
     /tmp/cclE82Jg.s:5125   .debug_str:000000000000064a .LASF12
     /tmp/cclE82Jg.s:5061   .debug_str:00000000000003f1 .LASF13
     /tmp/cclE82Jg.s:5043   .debug_str:0000000000000370 .LASF14
     /tmp/cclE82Jg.s:5457   .debug_str:0000000000001202 .LASF15
     /tmp/cclE82Jg.s:5103   .debug_str:000000000000055a .LASF16
     /tmp/cclE82Jg.s:5441   .debug_str:000000000000109c .LASF17
     /tmp/cclE82Jg.s:5555   .debug_str:00000000000014f3 .LASF109
     /tmp/cclE82Jg.s:5363   .debug_str:0000000000000e65 .LASF21
     /tmp/cclE82Jg.s:5229   .debug_str:000000000000098e .LASF18
     /tmp/cclE82Jg.s:5111   .debug_str:00000000000005bd .LASF19
     /tmp/cclE82Jg.s:5575   .debug_str:00000000000015a1 .LASF20
     /tmp/cclE82Jg.s:5539   .debug_str:0000000000001447 .LASF22
     /tmp/cclE82Jg.s:5117   .debug_str:00000000000005fd .LASF23
     /tmp/cclE82Jg.s:5487   .debug_str:00000000000012ba .LASF24
     /tmp/cclE82Jg.s:5075   .debug_str:000000000000047e .LASF25
     /tmp/cclE82Jg.s:5173   .debug_str:00000000000007e0 .LASF46
     /tmp/cclE82Jg.s:5445   .debug_str:00000000000010c1 .LASF48
     /tmp/cclE82Jg.s:5547   .debug_str:00000000000014a0 .LASF64
     /tmp/cclE82Jg.s:5585   .debug_str:00000000000015f2 .LASF26
     /tmp/cclE82Jg.s:5421   .debug_str:0000000000001005 .LASF28
     /tmp/cclE82Jg.s:5279   .debug_str:0000000000000b91 .LASF27
     /tmp/cclE82Jg.s:5255   .debug_str:0000000000000a8d .LASF29
     /tmp/cclE82Jg.s:5099   .debug_str:000000000000053d .LASF30
     /tmp/cclE82Jg.s:4969   .debug_str:0000000000000079 .LASF31
     /tmp/cclE82Jg.s:5259   .debug_str:0000000000000ac4 .LASF38
     /tmp/cclE82Jg.s:5549   .debug_str:00000000000014b1 .LASF40
     /tmp/cclE82Jg.s:5039   .debug_str:000000000000034c .LASF32
     /tmp/cclE82Jg.s:5235   .debug_str:00000000000009cb .LASF33
     /tmp/cclE82Jg.s:5093   .debug_str:00000000000004ec .LASF34
     /tmp/cclE82Jg.s:5051   .debug_str:000000000000039d .LASF35
     /tmp/cclE82Jg.s:5191   .debug_str:000000000000086f .LASF36
     /tmp/cclE82Jg.s:5069   .debug_str:0000000000000448 .LASF37
     /tmp/cclE82Jg.s:5017   .debug_str:0000000000000281 .LASF39
     /tmp/cclE82Jg.s:5143   .debug_str:00000000000006b2 .LASF41
     /tmp/cclE82Jg.s:5411   .debug_str:0000000000000fa4 .LASF42
     /tmp/cclE82Jg.s:5109   .debug_str:00000000000005a2 .LASF43
     /tmp/cclE82Jg.s:5185   .debug_str:0000000000000848 .LASF44
     /tmp/cclE82Jg.s:5567   .debug_str:0000000000001559 .LASF45
     /tmp/cclE82Jg.s:5529   .debug_str:000000000000140f .LASF47
     /tmp/cclE82Jg.s:5513   .debug_str:000000000000138f .LASF49
     /tmp/cclE82Jg.s:5381   .debug_str:0000000000000ed1 .LASF50
     /tmp/cclE82Jg.s:5305   .debug_str:0000000000000c7d .LASF51
     /tmp/cclE82Jg.s:5349   .debug_str:0000000000000df3 .LASF52
     /tmp/cclE82Jg.s:5357   .debug_str:0000000000000e33 .LASF53
     /tmp/cclE82Jg.s:5295   .debug_str:0000000000000c12 .LASF54
     /tmp/cclE82Jg.s:5211   .debug_str:0000000000000917 .LASF55
     /tmp/cclE82Jg.s:5569   .debug_str:0000000000001573 .LASF56
     /tmp/cclE82Jg.s:5495   .debug_str:00000000000012e4 .LASF57
     /tmp/cclE82Jg.s:5287   .debug_str:0000000000000bcc .LASF58
     /tmp/cclE82Jg.s:5303   .debug_str:0000000000000c69 .LASF59
     /tmp/cclE82Jg.s:5273   .debug_str:0000000000000b55 .LASF60
GAS LISTING /tmp/cclE82Jg.s 			page 47


     /tmp/cclE82Jg.s:5361   .debug_str:0000000000000e51 .LASF61
     /tmp/cclE82Jg.s:5623   .debug_str:000000000000174e .LASF62
     /tmp/cclE82Jg.s:5189   .debug_str:000000000000085b .LASF63
     /tmp/cclE82Jg.s:5593   .debug_str:000000000000163c .LASF65
     /tmp/cclE82Jg.s:5453   .debug_str:00000000000011d9 .LASF66
     /tmp/cclE82Jg.s:5405   .debug_str:0000000000000f82 .LASF67
     /tmp/cclE82Jg.s:5407   .debug_str:0000000000000f95 .LASF68
     /tmp/cclE82Jg.s:5097   .debug_str:000000000000052a .LASF69
     /tmp/cclE82Jg.s:5091   .debug_str:00000000000004e6 .LASF70
     /tmp/cclE82Jg.s:4989   .debug_str:0000000000000149 .LASF71
     /tmp/cclE82Jg.s:5187   .debug_str:0000000000000855 .LASF72
     /tmp/cclE82Jg.s:5079   .debug_str:000000000000049d .LASF73
     /tmp/cclE82Jg.s:5031   .debug_str:00000000000002f8 .LASF74
     /tmp/cclE82Jg.s:5413   .debug_str:0000000000000fb2 .LASF75
     /tmp/cclE82Jg.s:4983   .debug_str:0000000000000110 .LASF76
     /tmp/cclE82Jg.s:5389   .debug_str:0000000000000efa .LASF77
     /tmp/cclE82Jg.s:5383   .debug_str:0000000000000eda .LASF78
     /tmp/cclE82Jg.s:5609   .debug_str:00000000000016c9 .LASF79
     /tmp/cclE82Jg.s:5387   .debug_str:0000000000000ef3 .LASF80
     /tmp/cclE82Jg.s:5041   .debug_str:000000000000035d .LASF81
     /tmp/cclE82Jg.s:5437   .debug_str:0000000000001087 .LASF82
     /tmp/cclE82Jg.s:5395   .debug_str:0000000000000f31 .LASF83
     /tmp/cclE82Jg.s:5557   .debug_str:00000000000014f9 .LASF84
     /tmp/cclE82Jg.s:5581   .debug_str:00000000000015bf .LASF85
     /tmp/cclE82Jg.s:5551   .debug_str:00000000000014cf .LASF86
     /tmp/cclE82Jg.s:5261   .debug_str:0000000000000ad4 .LASF87
     /tmp/cclE82Jg.s:5371   .debug_str:0000000000000e94 .LASF88
     /tmp/cclE82Jg.s:5163   .debug_str:00000000000007a2 .LASF89
     /tmp/cclE82Jg.s:5171   .debug_str:00000000000007da .LASF90
     /tmp/cclE82Jg.s:5071   .debug_str:0000000000000467 .LASF91
     /tmp/cclE82Jg.s:5167   .debug_str:00000000000007ba .LASF92
     /tmp/cclE82Jg.s:5175   .debug_str:00000000000007eb .LASF93
     /tmp/cclE82Jg.s:5521   .debug_str:00000000000013c9 .LASF94
     /tmp/cclE82Jg.s:5151   .debug_str:0000000000000703 .LASF95
     /tmp/cclE82Jg.s:5333   .debug_str:0000000000000d84 .LASF96
     /tmp/cclE82Jg.s:5205   .debug_str:00000000000008dc .LASF97
     /tmp/cclE82Jg.s:5373   .debug_str:0000000000000e9a .LASF98
     /tmp/cclE82Jg.s:4975   .debug_str:00000000000000c5 .LASF99
     /tmp/cclE82Jg.s:5019   .debug_str:000000000000028b .LASF100
     /tmp/cclE82Jg.s:5519   .debug_str:00000000000013bd .LASF101
     /tmp/cclE82Jg.s:5021   .debug_str:000000000000029a .LASF102
     /tmp/cclE82Jg.s:5277   .debug_str:0000000000000b7f .LASF103
     /tmp/cclE82Jg.s:5155   .debug_str:000000000000072d .LASF104
     /tmp/cclE82Jg.s:5197   .debug_str:000000000000089e .LASF105
     /tmp/cclE82Jg.s:5037   .debug_str:0000000000000338 .LASF106
     /tmp/cclE82Jg.s:5481   .debug_str:0000000000001296 .LASF107
     /tmp/cclE82Jg.s:5249   .debug_str:0000000000000a67 .LASF108
     /tmp/cclE82Jg.s:5321   .debug_str:0000000000000d20 .LASF110
     /tmp/cclE82Jg.s:5427   .debug_str:0000000000001031 .LASF113
     /tmp/cclE82Jg.s:5217   .debug_str:0000000000000946 .LASF111
     /tmp/cclE82Jg.s:5047   .debug_str:000000000000038f .LASF112
     /tmp/cclE82Jg.s:5135   .debug_str:0000000000000682 .LASF114
     /tmp/cclE82Jg.s:5221   .debug_str:000000000000095e .LASF115
     /tmp/cclE82Jg.s:5227   .debug_str:000000000000097b .LASF116
     /tmp/cclE82Jg.s:5131   .debug_str:000000000000066d .LASF117
     /tmp/cclE82Jg.s:5627   .debug_str:0000000000001774 .LASF118
     /tmp/cclE82Jg.s:5265   .debug_str:0000000000000b09 .LASF119
GAS LISTING /tmp/cclE82Jg.s 			page 48


     /tmp/cclE82Jg.s:4985   .debug_str:000000000000011b .LASF121
     /tmp/cclE82Jg.s:5463   .debug_str:0000000000001230 .LASF120
     /tmp/cclE82Jg.s:5267   .debug_str:0000000000000b13 .LASF122
     /tmp/cclE82Jg.s:5545   .debug_str:0000000000001495 .LASF123
     /tmp/cclE82Jg.s:5499   .debug_str:0000000000001302 .LASF124
     /tmp/cclE82Jg.s:5459   .debug_str:000000000000120e .LASF125
     /tmp/cclE82Jg.s:4977   .debug_str:00000000000000cd .LASF126
     /tmp/cclE82Jg.s:5561   .debug_str:0000000000001508 .LASF127
     /tmp/cclE82Jg.s:4973   .debug_str:0000000000000097 .LASF128
     /tmp/cclE82Jg.s:5471   .debug_str:000000000000125f .LASF129
     /tmp/cclE82Jg.s:5161   .debug_str:0000000000000773 .LASF130
     /tmp/cclE82Jg.s:4961   .debug_str:0000000000000031 .LASF131
     /tmp/cclE82Jg.s:5307   .debug_str:0000000000000c92 .LASF132
     /tmp/cclE82Jg.s:5105   .debug_str:0000000000000570 .LASF133
     /tmp/cclE82Jg.s:5565   .debug_str:0000000000001531 .LASF134
     /tmp/cclE82Jg.s:5443   .debug_str:00000000000010b2 .LASF135
     /tmp/cclE82Jg.s:5095   .debug_str:0000000000000503 .LASF136
     /tmp/cclE82Jg.s:5087   .debug_str:00000000000004ce .LASF137
     /tmp/cclE82Jg.s:5543   .debug_str:0000000000001466 .LASF138
     /tmp/cclE82Jg.s:5127   .debug_str:0000000000000659 .LASF139
     /tmp/cclE82Jg.s:5257   .debug_str:0000000000000aa5 .LASF140
     /tmp/cclE82Jg.s:4995   .debug_str:00000000000001a2 .LASF141
     /tmp/cclE82Jg.s:5309   .debug_str:0000000000000cbc .LASF142
     /tmp/cclE82Jg.s:5479   .debug_str:0000000000001290 .LASF143
     /tmp/cclE82Jg.s:5035   .debug_str:0000000000000332 .LASF144
     /tmp/cclE82Jg.s:5425   .debug_str:0000000000001029 .LASF145
     /tmp/cclE82Jg.s:5053   .debug_str:00000000000003c1 .LASF146
     /tmp/cclE82Jg.s:5023   .debug_str:00000000000002ad .LASF147
     /tmp/cclE82Jg.s:5331   .debug_str:0000000000000d7c .LASF148
     /tmp/cclE82Jg.s:5215   .debug_str:000000000000093d .LASF149
     /tmp/cclE82Jg.s:5403   .debug_str:0000000000000f7a .LASF150
     /tmp/cclE82Jg.s:5165   .debug_str:00000000000007b4 .LASF151
     /tmp/cclE82Jg.s:5507   .debug_str:000000000000136d .LASF152
     /tmp/cclE82Jg.s:5283   .debug_str:0000000000000bab .LASF332
     /tmp/cclE82Jg.s:5311   .debug_str:0000000000000cda .LASF153
     /tmp/cclE82Jg.s:5559   .debug_str:0000000000001503 .LASF154
     /tmp/cclE82Jg.s:5605   .debug_str:0000000000001694 .LASF155
     /tmp/cclE82Jg.s:5597   .debug_str:0000000000001657 .LASF156
     /tmp/cclE82Jg.s:5493   .debug_str:00000000000012d4 .LASF157
     /tmp/cclE82Jg.s:5083   .debug_str:00000000000004c0 .LASF158
     /tmp/cclE82Jg.s:4997   .debug_str:00000000000001a8 .LASF159
     /tmp/cclE82Jg.s:5225   .debug_str:0000000000000975 .LASF160
     /tmp/cclE82Jg.s:5317   .debug_str:0000000000000cfc .LASF161
     /tmp/cclE82Jg.s:5485   .debug_str:00000000000012b2 .LASF162
     /tmp/cclE82Jg.s:5081   .debug_str:00000000000004af .LASF163
     /tmp/cclE82Jg.s:5253   .debug_str:0000000000000a80 .LASF168
     /tmp/cclE82Jg.s:5237   .debug_str:00000000000009e9 .LASF170
     /tmp/cclE82Jg.s:5613   .debug_str:00000000000016f6 .LASF164
     /tmp/cclE82Jg.s:5129   .debug_str:0000000000000661 .LASF165
     /tmp/cclE82Jg.s:5181   .debug_str:0000000000000816 .LASF166
     /tmp/cclE82Jg.s:5193   .debug_str:0000000000000881 .LASF167
     /tmp/cclE82Jg.s:5417   .debug_str:0000000000000fde .LASF169
     /tmp/cclE82Jg.s:5077   .debug_str:000000000000048a .LASF171
     /tmp/cclE82Jg.s:5353   .debug_str:0000000000000e1d .LASF172
     /tmp/cclE82Jg.s:5449   .debug_str:00000000000010f9 .LASF173
     /tmp/cclE82Jg.s:5281   .debug_str:0000000000000b9c .LASF174
     /tmp/cclE82Jg.s:4963   .debug_str:0000000000000042 .LASF175
GAS LISTING /tmp/cclE82Jg.s 			page 49


     /tmp/cclE82Jg.s:5579   .debug_str:00000000000015b0 .LASF176
     /tmp/cclE82Jg.s:5323   .debug_str:0000000000000d30 .LASF177
     /tmp/cclE82Jg.s:5439   .debug_str:000000000000108e .LASF178
     /tmp/cclE82Jg.s:5347   .debug_str:0000000000000de7 .LASF179
     /tmp/cclE82Jg.s:4957   .debug_str:000000000000000f .LASF180
     /tmp/cclE82Jg.s:5301   .debug_str:0000000000000c59 .LASF181
     /tmp/cclE82Jg.s:5377   .debug_str:0000000000000eab .LASF182
     /tmp/cclE82Jg.s:5245   .debug_str:0000000000000a2e .LASF183
     /tmp/cclE82Jg.s:5587   .debug_str:0000000000001601 .LASF184
     /tmp/cclE82Jg.s:5201   .debug_str:00000000000008c3 .LASF185
     /tmp/cclE82Jg.s:5431   .debug_str:0000000000001054 .LASF186
     /tmp/cclE82Jg.s:5603   .debug_str:000000000000167e .LASF187
     /tmp/cclE82Jg.s:5465   .debug_str:0000000000001239 .LASF188
     /tmp/cclE82Jg.s:5433   .debug_str:000000000000105f .LASF189
     /tmp/cclE82Jg.s:5409   .debug_str:0000000000000f9c .LASF190
     /tmp/cclE82Jg.s:5325   .debug_str:0000000000000d4a .LASF191
     /tmp/cclE82Jg.s:5293   .debug_str:0000000000000bf3 .LASF192
     /tmp/cclE82Jg.s:5067   .debug_str:0000000000000436 .LASF193
     /tmp/cclE82Jg.s:5583   .debug_str:00000000000015d5 .LASF194
     /tmp/cclE82Jg.s:5629   .debug_str:000000000000177e .LASF195
     /tmp/cclE82Jg.s:5297   .debug_str:0000000000000c19 .LASF196
     /tmp/cclE82Jg.s:5393   .debug_str:0000000000000f1e .LASF197
     /tmp/cclE82Jg.s:5419   .debug_str:0000000000000fe7 .LASF198
     /tmp/cclE82Jg.s:5535   .debug_str:0000000000001429 .LASF199
     /tmp/cclE82Jg.s:5625   .debug_str:0000000000001756 .LASF200
     /tmp/cclE82Jg.s:5611   .debug_str:00000000000016e1 .LASF201
     /tmp/cclE82Jg.s:5447   .debug_str:00000000000010d9 .LASF202
     /tmp/cclE82Jg.s:5319   .debug_str:0000000000000d0c .LASF203
     /tmp/cclE82Jg.s:5299   .debug_str:0000000000000c3a .LASF204
     /tmp/cclE82Jg.s:5399   .debug_str:0000000000000f6a .LASF205
     /tmp/cclE82Jg.s:5359   .debug_str:0000000000000e46 .LASF206
     /tmp/cclE82Jg.s:5147   .debug_str:00000000000006e7 .LASF207
     /tmp/cclE82Jg.s:5497   .debug_str:00000000000012f8 .LASF208
     /tmp/cclE82Jg.s:5133   .debug_str:0000000000000676 .LASF209
     /tmp/cclE82Jg.s:5595   .debug_str:0000000000001649 .LASF210
     /tmp/cclE82Jg.s:5007   .debug_str:0000000000000217 .LASF211
     /tmp/cclE82Jg.s:5011   .debug_str:000000000000024b .LASF212
     /tmp/cclE82Jg.s:5033   .debug_str:0000000000000306 .LASF213
     /tmp/cclE82Jg.s:5617   .debug_str:0000000000001712 .LASF214
     /tmp/cclE82Jg.s:5029   .debug_str:00000000000002e7 .LASF215
     /tmp/cclE82Jg.s:4967   .debug_str:0000000000000074 .LASF216
     /tmp/cclE82Jg.s:5531   .debug_str:0000000000001418 .LASF217
     /tmp/cclE82Jg.s:5243   .debug_str:0000000000000a26 .LASF218
     /tmp/cclE82Jg.s:5089   .debug_str:00000000000004e0 .LASF219
     /tmp/cclE82Jg.s:5511   .debug_str:0000000000001387 .LASF220
     /tmp/cclE82Jg.s:5015   .debug_str:0000000000000270 .LASF221
     /tmp/cclE82Jg.s:5473   .debug_str:0000000000001274 .LASF222
     /tmp/cclE82Jg.s:5573   .debug_str:0000000000001594 .LASF223
     /tmp/cclE82Jg.s:5339   .debug_str:0000000000000dba .LASF224
     /tmp/cclE82Jg.s:4959   .debug_str:000000000000001f .LASF225
     /tmp/cclE82Jg.s:5119   .debug_str:0000000000000609 .LASF226
     /tmp/cclE82Jg.s:5025   .debug_str:00000000000002b6 .LASF227
     /tmp/cclE82Jg.s:4991   .debug_str:000000000000015b .LASF228
     /tmp/cclE82Jg.s:5367   .debug_str:0000000000000e84 .LASF229
     /tmp/cclE82Jg.s:5149   .debug_str:00000000000006ef .LASF230
     /tmp/cclE82Jg.s:5005   .debug_str:000000000000020b .LASF231
     /tmp/cclE82Jg.s:5365   .debug_str:0000000000000e70 .LASF232
GAS LISTING /tmp/cclE82Jg.s 			page 50


     /tmp/cclE82Jg.s:5085   .debug_str:00000000000004c9 .LASF233
     /tmp/cclE82Jg.s:5429   .debug_str:000000000000103d .LASF234
     /tmp/cclE82Jg.s:5461   .debug_str:0000000000001229 .LASF235
     /tmp/cclE82Jg.s:5379   .debug_str:0000000000000eb8 .LASF236
     /tmp/cclE82Jg.s:5477   .debug_str:0000000000001284 .LASF237
     /tmp/cclE82Jg.s:5391   .debug_str:0000000000000f12 .LASF238
     /tmp/cclE82Jg.s:5251   .debug_str:0000000000000a6c .LASF239
     /tmp/cclE82Jg.s:5169   .debug_str:00000000000007c5 .LASF240
     /tmp/cclE82Jg.s:5049   .debug_str:0000000000000394 .LASF241
     /tmp/cclE82Jg.s:5057   .debug_str:00000000000003d9 .LASF242
     /tmp/cclE82Jg.s:5285   .debug_str:0000000000000bc3 .LASF243
     /tmp/cclE82Jg.s:5329   .debug_str:0000000000000d71 .LASF244
     /tmp/cclE82Jg.s:4955   .debug_str:0000000000000000 .LASF245
     /tmp/cclE82Jg.s:5159   .debug_str:0000000000000751 .LASF246
     /tmp/cclE82Jg.s:5509   .debug_str:0000000000001378 .LASF247
     /tmp/cclE82Jg.s:5455   .debug_str:00000000000011e0 .LASF248
     /tmp/cclE82Jg.s:5505   .debug_str:000000000000135c .LASF249
     /tmp/cclE82Jg.s:5065   .debug_str:0000000000000412 .LASF250
     /tmp/cclE82Jg.s:5469   .debug_str:000000000000124f .LASF251
     /tmp/cclE82Jg.s:5351   .debug_str:0000000000000dfa .LASF252
     /tmp/cclE82Jg.s:5223   .debug_str:000000000000096c .LASF253
     /tmp/cclE82Jg.s:5177   .debug_str:0000000000000803 .LASF254
     /tmp/cclE82Jg.s:5621   .debug_str:0000000000001736 .LASF255
     /tmp/cclE82Jg.s:4971   .debug_str:000000000000008f .LASF256
     /tmp/cclE82Jg.s:5241   .debug_str:0000000000000a0c .LASF257
     /tmp/cclE82Jg.s:5195   .debug_str:000000000000088e .LASF258
     /tmp/cclE82Jg.s:5591   .debug_str:0000000000001619 .LASF259
     /tmp/cclE82Jg.s:5563   .debug_str:000000000000151e .LASF260
     /tmp/cclE82Jg.s:5397   .debug_str:0000000000000f44 .LASF261
     /tmp/cclE82Jg.s:5601   .debug_str:0000000000001671 .LASF262
     /tmp/cclE82Jg.s:4993   .debug_str:000000000000017e .LASF263
     /tmp/cclE82Jg.s:5289   .debug_str:0000000000000bd4 .LASF264
     /tmp/cclE82Jg.s:5523   .debug_str:00000000000013d8 .LASF265
     /tmp/cclE82Jg.s:5113   .debug_str:00000000000005c6 .LASF266
     /tmp/cclE82Jg.s:5313   .debug_str:0000000000000cdf .LASF267
     /tmp/cclE82Jg.s:5467   .debug_str:0000000000001244 .LASF268
     /tmp/cclE82Jg.s:5345   .debug_str:0000000000000ddd .LASF269
     /tmp/cclE82Jg.s:5537   .debug_str:000000000000143c .LASF270
     /tmp/cclE82Jg.s:5475   .debug_str:0000000000001279 .LASF271
     /tmp/cclE82Jg.s:5533   .debug_str:000000000000141d .LASF272
     /tmp/cclE82Jg.s:4987   .debug_str:000000000000013c .LASF273
     /tmp/cclE82Jg.s:5269   .debug_str:0000000000000b34 .LASF274
     /tmp/cclE82Jg.s:5343   .debug_str:0000000000000dd1 .LASF275
     /tmp/cclE82Jg.s:5435   .debug_str:0000000000001075 .LASF276
     /tmp/cclE82Jg.s:5107   .debug_str:0000000000000580 .LASF277
     /tmp/cclE82Jg.s:5527   .debug_str:00000000000013fd .LASF278
     /tmp/cclE82Jg.s:5183   .debug_str:0000000000000826 .LASF279
     /tmp/cclE82Jg.s:5525   .debug_str:00000000000013eb .LASF280
     /tmp/cclE82Jg.s:5275   .debug_str:0000000000000b5d .LASF281
     /tmp/cclE82Jg.s:5213   .debug_str:000000000000092a .LASF282
     /tmp/cclE82Jg.s:5027   .debug_str:00000000000002c4 .LASF283
     /tmp/cclE82Jg.s:5101   .debug_str:0000000000000547 .LASF284
     /tmp/cclE82Jg.s:5115   .debug_str:00000000000005da .LASF285
     /tmp/cclE82Jg.s:4999   .debug_str:00000000000001bb .LASF286
     /tmp/cclE82Jg.s:5615   .debug_str:0000000000001703 .LASF287
     /tmp/cclE82Jg.s:5263   .debug_str:0000000000000aea .LASF288
     /tmp/cclE82Jg.s:5571   .debug_str:000000000000157b .LASF289
GAS LISTING /tmp/cclE82Jg.s 			page 51


     /tmp/cclE82Jg.s:5247   .debug_str:0000000000000a3d .LASF290
     /tmp/cclE82Jg.s:5231   .debug_str:0000000000000997 .LASF291
     /tmp/cclE82Jg.s:5607   .debug_str:00000000000016a0 .LASF292
     /tmp/cclE82Jg.s:5123   .debug_str:0000000000000639 .LASF293
     /tmp/cclE82Jg.s:5483   .debug_str:00000000000012a0 .LASF294
     /tmp/cclE82Jg.s:5137   .debug_str:000000000000068b .LASF295
     /tmp/cclE82Jg.s:5589   .debug_str:000000000000160c .LASF296
     /tmp/cclE82Jg.s:5157   .debug_str:0000000000000740 .LASF297
     /tmp/cclE82Jg.s:5203   .debug_str:00000000000008d0 .LASF298
     /tmp/cclE82Jg.s:5233   .debug_str:00000000000009af .LASF299
     /tmp/cclE82Jg.s:5009   .debug_str:000000000000023f .LASF300
     /tmp/cclE82Jg.s:5003   .debug_str:00000000000001ef .LASF301
     /tmp/cclE82Jg.s:5013   .debug_str:0000000000000260 .LASF302
     /tmp/cclE82Jg.s:5503   .debug_str:000000000000133a .LASF303
     /tmp/cclE82Jg.s:5121   .debug_str:0000000000000630 .LASF333
     /tmp/cclE82Jg.s:5553   .debug_str:00000000000014d9 .LASF334
     /tmp/cclE82Jg.s:5139   .debug_str:0000000000000698 .LASF304
     /tmp/cclE82Jg.s:5337   .debug_str:0000000000000da2 .LASF335
     /tmp/cclE82Jg.s:5599   .debug_str:000000000000165d .LASF336
     /tmp/cclE82Jg.s:5515   .debug_str:00000000000013a4 .LASF305
     /tmp/cclE82Jg.s:5315   .debug_str:0000000000000ce9 .LASF306
     /tmp/cclE82Jg.s:5489   .debug_str:00000000000012c7 .LASF307
     /tmp/cclE82Jg.s:4965   .debug_str:000000000000005c .LASF308
     /tmp/cclE82Jg.s:5207   .debug_str:00000000000008fe .LASF309
     /tmp/cclE82Jg.s:5291   .debug_str:0000000000000bdd .LASF310
     /tmp/cclE82Jg.s:5415   .debug_str:0000000000000fcd .LASF311
     /tmp/cclE82Jg.s:5063   .debug_str:0000000000000401 .LASF312
     /tmp/cclE82Jg.s:5501   .debug_str:0000000000001325 .LASF313
     /tmp/cclE82Jg.s:5001   .debug_str:00000000000001d6 .LASF314
     /tmp/cclE82Jg.s:5619   .debug_str:0000000000001719 .LASF315
     /tmp/cclE82Jg.s:459    .text:0000000000000238 .LFB38
     /tmp/cclE82Jg.s:519    .text:0000000000000278 .LFE38
     /tmp/cclE82Jg.s:477    .text:0000000000000258 .LBB47
     /tmp/cclE82Jg.s:490    .text:0000000000000260 .LBE47
     /tmp/cclE82Jg.s:4767   .debug_loc:0000000000000000 .LLST3
     /tmp/cclE82Jg.s:503    .text:000000000000026c .LBB49
     /tmp/cclE82Jg.s:515    .text:0000000000000274 .LBE49
     /tmp/cclE82Jg.s:4776   .debug_loc:0000000000000026 .LLST4
     /tmp/cclE82Jg.s:406    .text:0000000000000200 .LFB37
     /tmp/cclE82Jg.s:453    .text:0000000000000238 .LFE37
     /tmp/cclE82Jg.s:5517   .debug_str:00000000000013b6 .LASF316
     /tmp/cclE82Jg.s:385    .text:00000000000001f0 .LFB36
     /tmp/cclE82Jg.s:400    .text:0000000000000200 .LFE36
     /tmp/cclE82Jg.s:352    .text:00000000000001d0 .LFB35
     /tmp/cclE82Jg.s:379    .text:00000000000001f0 .LFE35
     /tmp/cclE82Jg.s:321    .text:00000000000001a8 .LFB34
     /tmp/cclE82Jg.s:346    .text:00000000000001d0 .LFE34
     /tmp/cclE82Jg.s:335    .text:00000000000001c0 .LVL22
     /tmp/cclE82Jg.s:255    .text:0000000000000130 .LFB33
     /tmp/cclE82Jg.s:315    .text:00000000000001a8 .LFE33
     /tmp/cclE82Jg.s:279    .text:0000000000000164 .LVL17
     /tmp/cclE82Jg.s:283    .text:000000000000016c .LVL18
     /tmp/cclE82Jg.s:291    .text:0000000000000180 .LVL19
     /tmp/cclE82Jg.s:297    .text:000000000000018c .LVL20
     /tmp/cclE82Jg.s:304    .text:0000000000000198 .LVL21
     /tmp/cclE82Jg.s:525    .text:0000000000000278 .LFB32
     /tmp/cclE82Jg.s:1208   .text:0000000000000574 .LFE32
GAS LISTING /tmp/cclE82Jg.s 			page 52


     /tmp/cclE82Jg.s:4979   .debug_str:0000000000000102 .LASF317
     /tmp/cclE82Jg.s:4785   .debug_loc:000000000000004c .LLST5
     /tmp/cclE82Jg.s:4927   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cclE82Jg.s:5491   .debug_str:00000000000012cf .LASF318
     /tmp/cclE82Jg.s:5423   .debug_str:0000000000001021 .LASF319
     /tmp/cclE82Jg.s:710    .text:000000000000037c .LBB61
     /tmp/cclE82Jg.s:726    .text:0000000000000388 .LBE61
     /tmp/cclE82Jg.s:730    .text:000000000000038c .LBB63
     /tmp/cclE82Jg.s:745    .text:0000000000000398 .LBE63
     /tmp/cclE82Jg.s:750    .text:000000000000039c .LBB65
     /tmp/cclE82Jg.s:762    .text:00000000000003a4 .LBE65
     /tmp/cclE82Jg.s:4812   .debug_loc:00000000000000ce .LLST9
     /tmp/cclE82Jg.s:784    .text:00000000000003e0 .LBB67
     /tmp/cclE82Jg.s:792    .text:00000000000003e4 .LBE67
     /tmp/cclE82Jg.s:4820   .debug_loc:00000000000000f2 .LLST10
     /tmp/cclE82Jg.s:802    .text:00000000000003f0 .LBB69
     /tmp/cclE82Jg.s:813    .text:00000000000003f4 .LBE69
     /tmp/cclE82Jg.s:4827   .debug_loc:0000000000000115 .LLST11
     /tmp/cclE82Jg.s:818    .text:00000000000003f8 .LBB71
     /tmp/cclE82Jg.s:829    .text:00000000000003fc .LBE71
     /tmp/cclE82Jg.s:4834   .debug_loc:0000000000000138 .LLST12
     /tmp/cclE82Jg.s:778    .text:00000000000003d4 .LVL49
     /tmp/cclE82Jg.s:833    .text:0000000000000404 .LVL56
     /tmp/cclE82Jg.s:862    .text:0000000000000424 .LVL57
     /tmp/cclE82Jg.s:4841   .debug_loc:000000000000015b .LLST6
     /tmp/cclE82Jg.s:5375   .debug_str:0000000000000ea1 .LASF320
     /tmp/cclE82Jg.s:4852   .debug_loc:0000000000000191 .LLST7
     /tmp/cclE82Jg.s:4859   .debug_loc:00000000000001b4 .LLST8
     /tmp/cclE82Jg.s:878    .text:0000000000000440 .LVL59
     /tmp/cclE82Jg.s:698    .text:0000000000000370 .LVL43
     /tmp/cclE82Jg.s:700    .text:0000000000000378 .LVL44
     /tmp/cclE82Jg.s:4870   .debug_loc:00000000000001ea .LLST13
     /tmp/cclE82Jg.s:909    .text:0000000000000454 .LBB76
     /tmp/cclE82Jg.s:924    .text:0000000000000460 .LBE76
     /tmp/cclE82Jg.s:930    .text:0000000000000468 .LBB78
     /tmp/cclE82Jg.s:945    .text:0000000000000474 .LBE78
     /tmp/cclE82Jg.s:1043   .text:00000000000004a8 .LBB80
     /tmp/cclE82Jg.s:1054   .text:00000000000004ac .LBE80
     /tmp/cclE82Jg.s:4877   .debug_loc:000000000000020d .LLST14
     /tmp/cclE82Jg.s:1059   .text:00000000000004b0 .LBB82
     /tmp/cclE82Jg.s:1070   .text:00000000000004b4 .LBE82
     /tmp/cclE82Jg.s:4884   .debug_loc:0000000000000230 .LLST15
     /tmp/cclE82Jg.s:1036   .text:00000000000004a4 .LVL65
     /tmp/cclE82Jg.s:1074   .text:00000000000004bc .LVL70
     /tmp/cclE82Jg.s:1089   .text:00000000000004c8 .LVL71
     /tmp/cclE82Jg.s:1097   .text:00000000000004d4 .LVL72
     /tmp/cclE82Jg.s:1105   .text:00000000000004e0 .LVL73
     /tmp/cclE82Jg.s:1113   .text:00000000000004ec .LVL74
     /tmp/cclE82Jg.s:1121   .text:00000000000004f8 .LVL75
     /tmp/cclE82Jg.s:1129   .text:0000000000000504 .LVL76
     /tmp/cclE82Jg.s:1137   .text:0000000000000510 .LVL77
     /tmp/cclE82Jg.s:1145   .text:000000000000051c .LVL78
     /tmp/cclE82Jg.s:1153   .text:0000000000000528 .LVL79
     /tmp/cclE82Jg.s:1161   .text:0000000000000534 .LVL80
     /tmp/cclE82Jg.s:1169   .text:0000000000000540 .LVL81
     /tmp/cclE82Jg.s:1177   .text:000000000000054c .LVL82
     /tmp/cclE82Jg.s:1185   .text:0000000000000558 .LVL83
GAS LISTING /tmp/cclE82Jg.s 			page 53


     /tmp/cclE82Jg.s:1193   .text:0000000000000564 .LVL84
     /tmp/cclE82Jg.s:1201   .text:0000000000000570 .LVL85
     /tmp/cclE82Jg.s:559    .text:00000000000002b0 .LBB51
     /tmp/cclE82Jg.s:575    .text:00000000000002bc .LBE51
     /tmp/cclE82Jg.s:592    .text:00000000000002e4 .LVL31
     /tmp/cclE82Jg.s:607    .text:00000000000002f8 .LVL33
     /tmp/cclE82Jg.s:890    .text:000000000000044c .LVL61
     /tmp/cclE82Jg.s:220    .text:0000000000000110 .LFB31
     /tmp/cclE82Jg.s:249    .text:0000000000000130 .LFE31
     /tmp/cclE82Jg.s:101    .text:000000000000005c .LFB30
     /tmp/cclE82Jg.s:133    .text:000000000000007c .LFE30
     /tmp/cclE82Jg.s:112    .text:0000000000000068 .LBB45
     /tmp/cclE82Jg.s:124    .text:0000000000000070 .LBE45
     /tmp/cclE82Jg.s:4891   .debug_loc:0000000000000253 .LLST1
     /tmp/cclE82Jg.s:63     .text:000000000000003c .LFB29
     /tmp/cclE82Jg.s:95     .text:000000000000005c .LFE29
     /tmp/cclE82Jg.s:74     .text:0000000000000048 .LBB43
     /tmp/cclE82Jg.s:86     .text:0000000000000050 .LBE43
     /tmp/cclE82Jg.s:4899   .debug_loc:0000000000000277 .LLST0
     /tmp/cclE82Jg.s:139    .text:000000000000007c .LFB28
     /tmp/cclE82Jg.s:214    .text:0000000000000110 .LFE28
     /tmp/cclE82Jg.s:4907   .debug_loc:000000000000029b .LLST2
     /tmp/cclE82Jg.s:153    .text:0000000000000094 .LVL8
     /tmp/cclE82Jg.s:165    .text:00000000000000a8 .LVL10
     /tmp/cclE82Jg.s:174    .text:00000000000000c0 .LVL12
     /tmp/cclE82Jg.s:182    .text:00000000000000d4 .LVL13
     /tmp/cclE82Jg.s:190    .text:00000000000000e8 .LVL14
     /tmp/cclE82Jg.s:196    .text:00000000000000f4 .LVL15
     /tmp/cclE82Jg.s:203    .text:0000000000000100 .LVL16
     /tmp/cclE82Jg.s:10     .text:0000000000000000 .LFB27
     /tmp/cclE82Jg.s:57     .text:000000000000003c .LFE27
     /tmp/cclE82Jg.s:26     .text:0000000000000018 .LBB41
     /tmp/cclE82Jg.s:38     .text:000000000000001c .LBE41
     /tmp/cclE82Jg.s:42     .text:0000000000000024 .LVL2
     /tmp/cclE82Jg.s:46     .text:000000000000002c .LVL3
     /tmp/cclE82Jg.s:5073   .debug_str:0000000000000479 .LASF337
     /tmp/cclE82Jg.s:5369   .debug_str:0000000000000e8f .LASF321
     /tmp/cclE82Jg.s:5577   .debug_str:00000000000015aa .LASF322
     /tmp/cclE82Jg.s:5355   .debug_str:0000000000000e26 .LASF323
     /tmp/cclE82Jg.s:5335   .debug_str:0000000000000d99 .LASF325
     /tmp/cclE82Jg.s:5271   .debug_str:0000000000000b40 .LASF324
     /tmp/cclE82Jg.s:5541   .debug_str:0000000000001456 .LASF326
     /tmp/cclE82Jg.s:5239   .debug_str:0000000000000a01 .LASF327
     /tmp/cclE82Jg.s:5055   .debug_str:00000000000003cb .LASF328
     /tmp/cclE82Jg.s:476    .text:0000000000000258 .LVL26
     /tmp/cclE82Jg.s:486    .text:0000000000000260 .LVL27
     /tmp/cclE82Jg.s:502    .text:000000000000026c .LVL28
     /tmp/cclE82Jg.s:512    .text:0000000000000274 .LVL29
     /tmp/cclE82Jg.s:573    .text:00000000000002bc .LVL30
     /tmp/cclE82Jg.s:595    .text:00000000000002e8 .LVL32
     /tmp/cclE82Jg.s:610    .text:00000000000002fc .LVL34
     /tmp/cclE82Jg.s:629    .text:0000000000000324 .LVL35
     /tmp/cclE82Jg.s:703    .text:000000000000037c .LVL45
     /tmp/cclE82Jg.s:719    .text:0000000000000380 .LVL46
     /tmp/cclE82Jg.s:880    .text:0000000000000444 .LVL60
     /tmp/cclE82Jg.s:893    .text:0000000000000450 .LVL62
     /tmp/cclE82Jg.s:906    .text:0000000000000454 .LVL63
GAS LISTING /tmp/cclE82Jg.s 			page 54


     /tmp/cclE82Jg.s:749    .text:000000000000039c .LVL47
     /tmp/cclE82Jg.s:759    .text:00000000000003a4 .LVL48
     /tmp/cclE82Jg.s:783    .text:00000000000003e0 .LVL50
     /tmp/cclE82Jg.s:790    .text:00000000000003e4 .LVL51
     /tmp/cclE82Jg.s:801    .text:00000000000003f0 .LVL52
     /tmp/cclE82Jg.s:810    .text:00000000000003f4 .LVL53
     /tmp/cclE82Jg.s:817    .text:00000000000003f8 .LVL54
     /tmp/cclE82Jg.s:826    .text:00000000000003fc .LVL55
     /tmp/cclE82Jg.s:631    .text:0000000000000328 .LVL36
     /tmp/cclE82Jg.s:649    .text:0000000000000334 .LVL37
     /tmp/cclE82Jg.s:663    .text:0000000000000348 .LVL39
     /tmp/cclE82Jg.s:687    .text:0000000000000360 .LVL41
     /tmp/cclE82Jg.s:655    .text:0000000000000338 .LVL38
     /tmp/cclE82Jg.s:683    .text:0000000000000358 .LVL40
     /tmp/cclE82Jg.s:691    .text:0000000000000368 .LVL42
     /tmp/cclE82Jg.s:864    .text:0000000000000428 .LVL58
     /tmp/cclE82Jg.s:952    .text:0000000000000484 .LVL64
     /tmp/cclE82Jg.s:1042   .text:00000000000004a8 .LVL66
     /tmp/cclE82Jg.s:1051   .text:00000000000004ac .LVL67
     /tmp/cclE82Jg.s:1058   .text:00000000000004b0 .LVL68
     /tmp/cclE82Jg.s:1067   .text:00000000000004b4 .LVL69
     /tmp/cclE82Jg.s:111    .text:0000000000000068 .LVL6
     /tmp/cclE82Jg.s:121    .text:0000000000000070 .LVL7
     /tmp/cclE82Jg.s:73     .text:0000000000000048 .LVL4
     /tmp/cclE82Jg.s:83     .text:0000000000000050 .LVL5
     /tmp/cclE82Jg.s:172    .text:00000000000000b8 .LVL11
     /tmp/cclE82Jg.s:1240   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cclE82Jg.s:625    .text:000000000000031c .LBB55
     /tmp/cclE82Jg.s:705    .text:000000000000037c .LBE55
     /tmp/cclE82Jg.s:867    .text:0000000000000428 .LBB74
     /tmp/cclE82Jg.s:884    .text:0000000000000444 .LBE74
     /tmp/cclE82Jg.s:658    .text:000000000000033c .LBB57
     /tmp/cclE82Jg.s:693    .text:0000000000000368 .LBE57
     /tmp/cclE82Jg.s:869    .text:0000000000000428 .LBB58
     /tmp/cclE82Jg.s:882    .text:0000000000000444 .LBE58
     /tmp/cclE82Jg.s:708    .text:000000000000037c .LBB60
     /tmp/cclE82Jg.s:836    .text:0000000000000404 .LBE60
     /tmp/cclE82Jg.s:855    .text:0000000000000418 .LBB73
     /tmp/cclE82Jg.s:866    .text:0000000000000428 .LBE73
     /tmp/cclE82Jg.s:898    .text:0000000000000450 .LBB75
     /tmp/cclE82Jg.s:1076   .text:00000000000004bc .LBE75
     /tmp/cclE82Jg.s:1084   .text:00000000000004c0 .LBB84
     /tmp/cclE82Jg.s:1204   .text:0000000000000574 .LBE84

UNDEFINED SYMBOLS
_ZN5Riscv14supervisorTrapEv
_ZN3PCB10initializeEv
_ZN8KConsole10initializeEv
_ZN9Scheduler3getEv
_ZN3PCB10consolePCBE
_ZN9Scheduler3putEP3PCB
_ZN8KConsole11pendingGetcE
_ZN3PCB10isFinishedEv
_Z15thread_dispatchv
_ZN3PCB7userPCBE
_Z8userMainv
_ZN3PCB7runningE
GAS LISTING /tmp/cclE82Jg.s 			page 55


_ZN3PCB10savedRegA4E
_ZN3PCB17threadExitHandlerEv
CONSOLE_STATUS
CONSOLE_TX_DATA
plic_claim
plic_complete
_ZN3PCB16timeSliceCounterE
_ZN12SleepPCBList13tryToWakePCBsEv
_ZN3PCB8dispatchEv
_ZN8KConsole17putCharacterInputEc
_ZN15MemoryAllocator15memAllocHandlerEv
_ZN15MemoryAllocator14memFreeHandlerEv
_ZN3PCB20threadMakePCBHandlerEv
_ZN3PCB19threadCreateHandlerEv
_ZN3PCB18threadStartHandlerEv
_ZN3PCB21threadDispatchHandlerEv
_ZN3PCB18threadSleepHandlerEv
_ZN3PCB19threadDelPCBHandlerEv
_ZN10KSemaphore14semOpenHandlerEv
_ZN10KSemaphore14semWaitHandlerEv
_ZN10KSemaphore16semSignalHandlerEv
_ZN10KSemaphore15semCloseHandlerEv
_ZN8KConsole11getcHandlerEv
_ZN8KConsole11putcHandlerEv
_ZN8KConsole14getCharHandlerEv
